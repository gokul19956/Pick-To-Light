

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Thu Mar  8 07:59:27 2018

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           	psect	idataCOMRAM
    52  0011BC                     __pidataCOMRAM:
    53                           	opt stack 0
    54                           
    55                           ;initializer for node_config@cur_segment
    56  0011BC  03                 	db	3
    57                           
    58                           ;initializer for read_digital_keypad@once
    59  0011BD  01                 	db	1
    60                           
    61                           	psect	smallconst
    62  000600                     __psmallconst:
    63                           	opt stack 0
    64  000600  00                 	db	0
    65  000601                     _digits:
    66                           	opt stack 0
    67  000601  E7                 	db	231
    68  000602  21                 	db	33
    69  000603  CB                 	db	203
    70  000604  6B                 	db	107
    71  000605  2D                 	db	45
    72  000606  6E                 	db	110
    73  000607  EE                 	db	238
    74  000608  23                 	db	35
    75  000609  EF                 	db	239
    76  00060A  6F                 	db	111
    77  00060B                     __end_of_digits:
    78                           	opt stack 0
    79  0000                     _RXFCON0	set	3540
    80  0000                     _RXF0SIDH	set	3840
    81  0000                     _RXF0SIDL	set	3841
    82  0000                     _RXM0EIDH	set	3866
    83  0000                     _RXM0EIDL	set	3867
    84  0000                     _RXM0SIDH	set	3864
    85  0000                     _RXM0SIDL	set	3865
    86  0000                     _TXB0D0	set	3910
    87  0000                     _TXB0D1	set	3911
    88  0000                     _TXB0D2	set	3912
    89  0000                     _TXB0D3	set	3913
    90  0000                     _TXB0D4	set	3914
    91  0000                     _TXB0D5	set	3915
    92  0000                     _TXB0D6	set	3916
    93  0000                     _TXB0D7	set	3917
    94  0000                     _TXB0DLC	set	3909
    95  0000                     _TXB0EIDH	set	3907
    96  0000                     _TXB0EIDL	set	3908
    97  0000                     _TXB0SIDH	set	3905
    98  0000                     _TXB0SIDL	set	3906
    99  0000                     _TXB0REQ	set	31235
   100  0000                     _TMR0	set	4054
   101  0000                     _BRGCON1	set	3952
   102  0000                     _BRGCON2	set	3953
   103  0000                     _BRGCON3	set	3954
   104  0000                     _CANCON	set	3951
   105  0000                     _CANSTAT	set	3950
   106  0000                     _ECANCON	set	3959
   107  0000                     _PORTA	set	3968
   108  0000                     _PORTBbits	set	3969
   109  0000                     _PORTC	set	3970
   110  0000                     _PORTD	set	3971
   111  0000                     _PORTEbits	set	3972
   112  0000                     _RXB0CON	set	3936
   113  0000                     _RXB0D0	set	3942
   114  0000                     _RXB0D1	set	3943
   115  0000                     _RXB0D2	set	3944
   116  0000                     _RXB0D3	set	3945
   117  0000                     _RXB0D4	set	3946
   118  0000                     _RXB0D5	set	3947
   119  0000                     _RXB0D6	set	3948
   120  0000                     _RXB0D7	set	3949
   121  0000                     _RXB0DLC	set	3941
   122  0000                     _RXB0EIDH	set	3939
   123  0000                     _RXB0EIDL	set	3940
   124  0000                     _RXB0SIDH	set	3937
   125  0000                     _RXB0SIDL	set	3938
   126  0000                     _SSPADD	set	4040
   127  0000                     _SSPBUF	set	4041
   128  0000                     _SSPCON1	set	4038
   129  0000                     _TRISA	set	3986
   130  0000                     _TRISC	set	3988
   131  0000                     _TRISD	set	3989
   132  0000                     _ACKDT	set	32301
   133  0000                     _ACKEN	set	32300
   134  0000                     _ACKSTAT	set	32302
   135  0000                     _BCLIF	set	32011
   136  0000                     _CKE	set	32318
   137  0000                     _GIE	set	32663
   138  0000                     _PEN	set	32298
   139  0000                     _RCEN	set	32299
   140  0000                     _RSEN	set	32297
   141  0000                     _RXB0FUL	set	31495
   142  0000                     _SEN	set	32296
   143  0000                     _SMP	set	32319
   144  0000                     _SSPIF	set	31987
   145  0000                     _T0CS	set	32429
   146  0000                     _T0IF	set	32658
   147  0000                     _TMR0IE	set	32661
   148  0000                     _TMR0IF	set	32658
   149  0000                     _TRISB2	set	31898
   150  0000                     _TRISB3	set	31899
   151  0000                     _TRISB7	set	31903
   152  0000                     _TRISC3	set	31907
   153  0000                     _TRISC4	set	31908
   154  0000                     _TRISE0	set	31920
   155                           
   156                           ; #config settings
   157  00060B  00                 	db	0	; dummy byte at the end
   158  0000                     
   159                           	psect	cinit
   160  000F3A                     __pcinit:
   161                           	opt stack 0
   162  000F3A                     start_initialization:
   163                           	opt stack 0
   164  000F3A                     __initialization:
   165                           	opt stack 0
   166                           
   167                           ; Clear objects allocated to BANK0 (13 bytes)
   168  000F3A  EE00  F060         	lfsr	0,__pbssBANK0
   169  000F3E  0E0D               	movlw	13
   170  000F40                     clear_0:
   171  000F40  6AEE               	clrf	postinc0,c
   172  000F42  06E8               	decf	wreg,f,c
   173  000F44  E1FD               	bnz	clear_0
   174                           
   175                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   176  000F46  6A4D               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   177                           
   178                           ; Clear objects allocated to COMRAM (38 bytes)
   179  000F48  EE00  F001         	lfsr	0,__pbssCOMRAM
   180  000F4C  0E26               	movlw	38
   181  000F4E                     clear_1:
   182  000F4E  6AEE               	clrf	postinc0,c
   183  000F50  06E8               	decf	wreg,f,c
   184  000F52  E1FD               	bnz	clear_1
   185                           
   186                           ; Initialize objects allocated to COMRAM (2 bytes)
   187                           ; load TBLPTR registers with __pidataCOMRAM
   188  000F54  0EBC               	movlw	low __pidataCOMRAM
   189  000F56  6EF6               	movwf	tblptrl,c
   190  000F58  0E11               	movlw	high __pidataCOMRAM
   191  000F5A  6EF7               	movwf	tblptrh,c
   192  000F5C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   193  000F5E  6EF8               	movwf	tblptru,c
   194  000F60  0009               	tblrd		*+	;fetch initializer
   195  000F62  CFF5 F04E          	movff	tablat,__pdataCOMRAM
   196  000F66  0009               	tblrd		*+	;fetch initializer
   197  000F68  CFF5 F04F          	movff	tablat,__pdataCOMRAM+1
   198  000F6C                     end_of_initialization:
   199                           	opt stack 0
   200  000F6C                     __end_of__initialization:
   201                           	opt stack 0
   202  000F6C  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   203  000F6E  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   204  000F70  0E00               	movlw	low (__Lsmallconst shr (0+16))
   205  000F72  6EF8               	movwf	tblptru,c
   206  000F74  0E06               	movlw	high __Lsmallconst
   207  000F76  6EF7               	movwf	tblptrh,c
   208  000F78  0100               	movlb	0
   209  000F7A  EFBE  F008         	goto	_main	;jump to C main() function
   210                           tblptru	equ	0xFF8
   211                           tblptrh	equ	0xFF7
   212                           tblptrl	equ	0xFF6
   213                           tablat	equ	0xFF5
   214                           postinc0	equ	0xFEE
   215                           wreg	equ	0xFE8
   216                           
   217                           	psect	bitbssCOMRAM
   218  000268                     __pbitbssCOMRAM:
   219                           	opt stack 0
   220  000268                     _message_received:
   221                           	opt stack 0
   222  000268                     	ds	1
   223  000269                     mode_selection@once:
   224                           	opt stack 0
   225  000269                     	ds	1
   226  00026A                     node_config@sub_screen:
   227                           	opt stack 0
   228  00026A                     	ds	1
   229                           tblptru	equ	0xFF8
   230                           tblptrh	equ	0xFF7
   231                           tblptrl	equ	0xFF6
   232                           tablat	equ	0xFF5
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           
   236                           	psect	bssCOMRAM
   237  000001                     __pbssCOMRAM:
   238                           	opt stack 0
   239  000001                     _can_rx_payload:
   240                           	opt stack 0
   241  000001                     	ds	13
   242  00000E                     isr@count1:
   243                           	opt stack 0
   244  00000E                     	ds	2
   245  000010                     node_config@screen:
   246                           	opt stack 0
   247  000010                     	ds	2
   248  000012                     	ds	2
   249  000014                     node_operation@r_data:
   250                           	opt stack 0
   251  000014                     	ds	2
   252  000016                     node_operation@wait:
   253                           	opt stack 0
   254  000016                     	ds	2
   255  000018                     pick_to_light@mode:
   256                           	opt stack 0
   257  000018                     	ds	2
   258  00001A                     node_config@j:
   259                           	opt stack 0
   260  00001A                     	ds	1
   261  00001B                     _node_id:
   262                           	opt stack 0
   263  00001B                     	ds	4
   264  00001F                     _ssd:
   265                           	opt stack 0
   266  00001F                     	ds	4
   267  000023                     node_config@count:
   268                           	opt stack 0
   269  000023                     	ds	4
   270                           tblptru	equ	0xFF8
   271                           tblptrh	equ	0xFF7
   272                           tblptrl	equ	0xFF6
   273                           tablat	equ	0xFF5
   274                           postinc0	equ	0xFEE
   275                           wreg	equ	0xFE8
   276                           
   277                           	psect	dataCOMRAM
   278  00004E                     __pdataCOMRAM:
   279                           	opt stack 0
   280  00004E                     node_config@cur_segment:
   281                           	opt stack 0
   282  00004E                     	ds	1
   283  00004F                     read_digital_keypad@once:
   284                           	opt stack 0
   285  00004F                     	ds	1
   286                           tblptru	equ	0xFF8
   287                           tblptrh	equ	0xFF7
   288                           tblptrl	equ	0xFF6
   289                           tablat	equ	0xFF5
   290                           postinc0	equ	0xFEE
   291                           wreg	equ	0xFE8
   292                           
   293                           	psect	bssBANK0
   294  000060                     __pbssBANK0:
   295                           	opt stack 0
   296  000060                     _can_tx_payload:
   297                           	opt stack 0
   298  000060                     	ds	13
   299                           tblptru	equ	0xFF8
   300                           tblptrh	equ	0xFF7
   301                           tblptrl	equ	0xFF6
   302                           tablat	equ	0xFF5
   303                           postinc0	equ	0xFEE
   304                           wreg	equ	0xFE8
   305                           
   306                           	psect	cstackBANK0
   307  00006D                     __pcstackBANK0:
   308                           	opt stack 0
   309  00006D                     ??_node_config:
   310  00006D                     node_operation@rem:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x0
   314  00006D                     	ds	2
   315  00006F                     node_config@byte:
   316                           	opt stack 0
   317  00006F                     node_operation@temp:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x2
   321  00006F                     	ds	1
   322  000070                     node_config@i:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x3
   326  000070                     	ds	1
   327  000071                     node_operation@i:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x4
   331  000071                     	ds	1
   332  000072                     node_config@key:
   333                           	opt stack 0
   334                           
   335                           ; 1 bytes @ 0x5
   336  000072                     	ds	1
   337  000073                     node_operation@key:
   338                           	opt stack 0
   339  000073                     node_config@value:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x6
   343  000073                     	ds	2
   344                           tblptru	equ	0xFF8
   345                           tblptrh	equ	0xFF7
   346                           tblptrl	equ	0xFF6
   347                           tablat	equ	0xFF5
   348                           postinc0	equ	0xFEE
   349                           wreg	equ	0xFE8
   350                           
   351                           	psect	cstackCOMRAM
   352  000027                     __pcstackCOMRAM:
   353                           	opt stack 0
   354  000027                     ??_isr:
   355  000027                     
   356                           ; 1 bytes @ 0x0
   357  000027                     	ds	15
   358  000036                     ?_mode_selection:
   359                           	opt stack 0
   360  000036                     ?___wmul:
   361                           	opt stack 0
   362  000036                     ?___lwdiv:
   363                           	opt stack 0
   364  000036                     ?___lwmod:
   365                           	opt stack 0
   366  000036                     delay_ms@count:
   367                           	opt stack 0
   368  000036                     read_digital_keypad@detection_type:
   369                           	opt stack 0
   370  000036                     i2c_write@data:
   371                           	opt stack 0
   372  000036                     mode_selection@mode:
   373                           	opt stack 0
   374  000036                     display@data:
   375                           	opt stack 0
   376  000036                     can_transmit@can_tx_payload:
   377                           	opt stack 0
   378  000036                     ___wmul@multiplier:
   379                           	opt stack 0
   380  000036                     ___lwdiv@dividend:
   381                           	opt stack 0
   382  000036                     ___lwmod@dividend:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0xF
   386  000036                     	ds	1
   387  000037                     eeprom_at24c04_random_read@memory_loc:
   388                           	opt stack 0
   389  000037                     delay_ms@i:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0x10
   393  000037                     	ds	1
   394  000038                     ??_display:
   395  000038                     eeprom_at24c04_random_read@received_data:
   396                           	opt stack 0
   397  000038                     delay_ms@_dcnt:
   398                           	opt stack 0
   399  000038                     ___wmul@multiplicand:
   400                           	opt stack 0
   401  000038                     ___lwdiv@divisor:
   402                           	opt stack 0
   403  000038                     ___lwmod@divisor:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x11
   407  000038                     	ds	1
   408  000039                     eeprom_at24c04_byte_write@data:
   409                           	opt stack 0
   410                           
   411                           ; 1 bytes @ 0x12
   412  000039                     	ds	1
   413  00003A                     eeprom_at24c04_byte_write@memory_loc:
   414                           	opt stack 0
   415  00003A                     display@digit:
   416                           	opt stack 0
   417  00003A                     ___lwdiv@counter:
   418                           	opt stack 0
   419  00003A                     ___lwmod@counter:
   420                           	opt stack 0
   421  00003A                     ___wmul@product:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0x13
   425  00003A                     	ds	1
   426  00003B                     display@wait:
   427                           	opt stack 0
   428  00003B                     ___lwdiv@quotient:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x14
   432  00003B                     	ds	1
   433  00003C                     ?_convert_to_short:
   434                           	opt stack 0
   435  00003C                     convert_to_short@data:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x15
   439  00003C                     	ds	1
   440  00003D                     convert_to_byte@data:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0x16
   444  00003D                     	ds	1
   445  00003E                     ??_convert_to_short:
   446                           
   447                           ; 1 bytes @ 0x17
   448  00003E                     	ds	1
   449  00003F                     convert_to_short@num:
   450                           	opt stack 0
   451  00003F                     convert_to_byte@value:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x18
   455  00003F                     	ds	2
   456  000041                     convert_to_short@i:
   457                           	opt stack 0
   458  000041                     convert_to_byte@a:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x1A
   462  000041                     	ds	2
   463  000043                     convert_to_byte@i:
   464                           	opt stack 0
   465  000043                     construct_payload@data:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x1C
   469  000043                     	ds	2
   470  000045                     ??_init_config:
   471  000045                     construct_payload@sign:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0x1E
   475  000045                     	ds	1
   476  000046                     ??_construct_payload:
   477                           
   478                           ; 1 bytes @ 0x1F
   479  000046                     	ds	2
   480  000048                     construct_payload@temp:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x21
   484  000048                     	ds	1
   485  000049                     init_config@temp:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x22
   489  000049                     	ds	1
   490  00004A                     ??_node_operation:
   491  00004A                     ?_node_config:
   492                           	opt stack 0
   493  00004A                     node_config@mode:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x23
   497  00004A                     	ds	2
   498  00004C                     pick_to_light@key:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x25
   502  00004C                     	ds	1
   503  00004D                     tblptru	equ	0xFF8
   504                           tblptrh	equ	0xFF7
   505                           tblptrl	equ	0xFF6
   506                           tablat	equ	0xFF5
   507                           postinc0	equ	0xFEE
   508                           wreg	equ	0xFE8
   509                           
   510                           ; 1 bytes @ 0x26
   511 ;;
   512 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   513 ;;
   514 ;; *************** function _main *****************
   515 ;; Defined at:
   516 ;;		line 359 in file "main.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;		None
   519 ;; Auto vars:     Size  Location     Type
   520 ;;		None
   521 ;; Return value:  Size  Location     Type
   522 ;;                  1    wreg      void 
   523 ;; Registers used:
   524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   525 ;; Tracked objects:
   526 ;;		On entry : 0/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   530 ;;      Params:         0       0       0       0       0       0       0
   531 ;;      Locals:         0       0       0       0       0       0       0
   532 ;;      Temps:          0       0       0       0       0       0       0
   533 ;;      Totals:         0       0       0       0       0       0       0
   534 ;;Total ram usage:        0 bytes
   535 ;; Hardware stack levels required when called:    6
   536 ;; This function calls:
   537 ;;		_init_config
   538 ;;		_pick_to_light
   539 ;; This function is called by:
   540 ;;		Startup code after reset
   541 ;; This function uses a non-reentrant model
   542 ;;
   543                           
   544                           	psect	text0
   545  00117C                     __ptext0:
   546                           	opt stack 0
   547  00117C                     _main:
   548                           	opt stack 25
   549                           
   550                           ;main.c: 361: init_config();
   551                           
   552                           ;incstack = 0
   553  00117C  EC20  F006         	call	_init_config	;wreg free
   554  001180                     l2491:
   555                           
   556                           ;main.c: 364: {
   557                           ;main.c: 365: pick_to_light();
   558  001180  EC48  F007         	call	_pick_to_light	;wreg free
   559  001184  D7FD               	goto	l2491
   560  001186                     __end_of_main:
   561                           	opt stack 0
   562                           tblptru	equ	0xFF8
   563                           tblptrh	equ	0xFF7
   564                           tblptrl	equ	0xFF6
   565                           tablat	equ	0xFF5
   566                           postinc0	equ	0xFEE
   567                           wreg	equ	0xFE8
   568                           
   569 ;; *************** function _pick_to_light *****************
   570 ;; Defined at:
   571 ;;		line 297 in file "main.c"
   572 ;; Parameters:    Size  Location     Type
   573 ;;		None
   574 ;; Auto vars:     Size  Location     Type
   575 ;;  key             1   37[COMRAM] unsigned char 
   576 ;; Return value:  Size  Location     Type
   577 ;;                  1    wreg      void 
   578 ;; Registers used:
   579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   580 ;; Tracked objects:
   581 ;;		On entry : 0/0
   582 ;;		On exit  : 0/0
   583 ;;		Unchanged: 0/0
   584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   585 ;;      Params:         0       0       0       0       0       0       0
   586 ;;      Locals:         1       0       0       0       0       0       0
   587 ;;      Temps:          0       0       0       0       0       0       0
   588 ;;      Totals:         1       0       0       0       0       0       0
   589 ;;Total ram usage:        1 bytes
   590 ;; Hardware stack levels used:    1
   591 ;; Hardware stack levels required when called:    5
   592 ;; This function calls:
   593 ;;		_display
   594 ;;		_mode_selection
   595 ;;		_node_config
   596 ;;		_node_operation
   597 ;;		_read_digital_keypad
   598 ;; This function is called by:
   599 ;;		_main
   600 ;; This function uses a non-reentrant model
   601 ;;
   602                           
   603                           	psect	text1
   604  000E90                     __ptext1:
   605                           	opt stack 0
   606  000E90                     _pick_to_light:
   607                           	opt stack 25
   608                           
   609                           ;main.c: 299: static unsigned short mode;
   610                           ;main.c: 300: unsigned char key;
   611                           ;main.c: 302: mode = mode_selection(mode);
   612                           
   613                           ;incstack = 0
   614  000E90  C018  F036         	movff	pick_to_light@mode,mode_selection@mode
   615  000E94  C019  F037         	movff	pick_to_light@mode+1,mode_selection@mode+1
   616  000E98  EC58  F008         	call	_mode_selection	;wreg free
   617  000E9C  C036  F018         	movff	?_mode_selection,pick_to_light@mode
   618  000EA0  C037  F019         	movff	?_mode_selection+1,pick_to_light@mode+1
   619                           
   620                           ;main.c: 305: if (mode == e_config)
   621  000EA4  0418               	decf	pick_to_light@mode,w,c
   622  000EA6  1019               	iorwf	pick_to_light@mode+1,w,c
   623  000EA8  A4D8               	btfss	status,2,c
   624  000EAA  D010               	goto	l2437
   625                           
   626                           ;main.c: 306: {
   627                           ;main.c: 307: key = read_digital_keypad(1);
   628  000EAC  0E01               	movlw	1
   629  000EAE  EC23  F008         	call	_read_digital_keypad
   630  000EB2  6E4C               	movwf	pick_to_light@key,c
   631                           
   632                           ;main.c: 309: mode = node_config(key, mode);
   633  000EB4  C018  F04A         	movff	pick_to_light@mode,node_config@mode
   634  000EB8  C019  F04B         	movff	pick_to_light@mode+1,node_config@mode+1
   635  000EBC  504C               	movf	pick_to_light@key,w,c
   636  000EBE  EC06  F003         	call	_node_config
   637  000EC2  C04A  F018         	movff	?_node_config,pick_to_light@mode
   638  000EC6  C04B  F019         	movff	?_node_config+1,pick_to_light@mode+1
   639                           
   640                           ;main.c: 310: }
   641  000ECA  D007               	goto	l2441
   642  000ECC                     l2437:
   643                           
   644                           ;main.c: 311: else
   645                           ;main.c: 312: {
   646                           ;main.c: 313: key = read_digital_keypad(0);
   647  000ECC  0E00               	movlw	0
   648  000ECE  EC23  F008         	call	_read_digital_keypad
   649  000ED2  6E4C               	movwf	pick_to_light@key,c
   650                           
   651                           ;main.c: 315: node_operation(key);
   652  000ED4  504C               	movf	pick_to_light@key,w,c
   653  000ED6  EC91  F004         	call	_node_operation
   654  000EDA                     l2441:
   655                           
   656                           ;main.c: 316: }
   657                           ;main.c: 318: display(ssd);
   658  000EDA  0E1F               	movlw	low _ssd
   659  000EDC  6E36               	movwf	display@data,c
   660  000EDE  0E00               	movlw	high _ssd
   661  000EE0  6E37               	movwf	display@data+1,c
   662  000EE2  ECA8  F006         	call	_display	;wreg free
   663  000EE6  0012               	return		;funcret
   664  000EE8                     __end_of_pick_to_light:
   665                           	opt stack 0
   666                           tblptru	equ	0xFF8
   667                           tblptrh	equ	0xFF7
   668                           tblptrl	equ	0xFF6
   669                           tablat	equ	0xFF5
   670                           postinc0	equ	0xFEE
   671                           wreg	equ	0xFE8
   672                           status	equ	0xFD8
   673                           
   674 ;; *************** function _read_digital_keypad *****************
   675 ;; Defined at:
   676 ;;		line 9 in file "digital_keypad.c"
   677 ;; Parameters:    Size  Location     Type
   678 ;;  detection_ty    1    wreg     unsigned char 
   679 ;; Auto vars:     Size  Location     Type
   680 ;;  detection_ty    1   15[COMRAM] unsigned char 
   681 ;; Return value:  Size  Location     Type
   682 ;;                  1    wreg      unsigned char 
   683 ;; Registers used:
   684 ;;		wreg, status,2, status,0
   685 ;; Tracked objects:
   686 ;;		On entry : 0/0
   687 ;;		On exit  : 0/0
   688 ;;		Unchanged: 0/0
   689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   690 ;;      Params:         0       0       0       0       0       0       0
   691 ;;      Locals:         1       0       0       0       0       0       0
   692 ;;      Temps:          0       0       0       0       0       0       0
   693 ;;      Totals:         1       0       0       0       0       0       0
   694 ;;Total ram usage:        1 bytes
   695 ;; Hardware stack levels used:    1
   696 ;; Hardware stack levels required when called:    1
   697 ;; This function calls:
   698 ;;		Nothing
   699 ;; This function is called by:
   700 ;;		_pick_to_light
   701 ;; This function uses a non-reentrant model
   702 ;;
   703                           
   704                           	psect	text2
   705  001046                     __ptext2:
   706                           	opt stack 0
   707  001046                     _read_digital_keypad:
   708                           	opt stack 28
   709                           
   710                           ;incstack = 0
   711                           ;read_digital_keypad@detection_type stored from wreg
   712  001046  6E36               	movwf	read_digital_keypad@detection_type,c
   713                           
   714                           ;digital_keypad.c: 11: static unsigned char once = 1;
   715                           ;digital_keypad.c: 13: if (detection_type == 1)
   716  001048  0436               	decf	read_digital_keypad@detection_type,w,c
   717  00104A  A4D8               	btfss	status,2,c
   718  00104C  D015               	goto	l1425
   719                           
   720                           ;digital_keypad.c: 14: {
   721                           ;digital_keypad.c: 15: if (((PORTC & 0x07) != 0x07) && once)
   722  00104E  5082               	movf	3970,w,c	;volatile
   723  001050  0B07               	andlw	7
   724  001052  0A07               	xorlw	7
   725  001054  B4D8               	btfsc	status,2,c
   726  001056  D008               	goto	l1421
   727  001058  504F               	movf	read_digital_keypad@once,w,c
   728  00105A  B4D8               	btfsc	status,2,c
   729  00105C  D005               	goto	l1421
   730                           
   731                           ;digital_keypad.c: 16: {
   732                           ;digital_keypad.c: 17: once = 0;
   733  00105E  0E00               	movlw	0
   734  001060  6E4F               	movwf	read_digital_keypad@once,c
   735  001062                     l1415:
   736                           
   737                           ;digital_keypad.c: 19: return (PORTC & 0x07);
   738  001062  5082               	movf	3970,w,c	;volatile
   739  001064  0B07               	andlw	7
   740  001066  0012               	return	
   741  001068                     l1421:
   742                           
   743                           ;digital_keypad.c: 21: else if ((PORTC & 0x07) == 0x07)
   744  001068  5082               	movf	3970,w,c	;volatile
   745  00106A  0B07               	andlw	7
   746  00106C  0A07               	xorlw	7
   747  00106E  A4D8               	btfss	status,2,c
   748  001070  D006               	goto	l1431
   749                           
   750                           ;digital_keypad.c: 22: {
   751                           ;digital_keypad.c: 23: once = 1;
   752  001072  0E01               	movlw	1
   753  001074  6E4F               	movwf	read_digital_keypad@once,c
   754                           
   755                           ;digital_keypad.c: 24: }
   756                           ;digital_keypad.c: 25: }
   757  001076  D003               	goto	l1431
   758  001078                     l1425:
   759                           
   760                           ;digital_keypad.c: 26: else if (detection_type == 0)
   761  001078  5036               	movf	read_digital_keypad@detection_type,w,c
   762  00107A  B4D8               	btfsc	status,2,c
   763  00107C  D7F2               	goto	l1415
   764  00107E                     l1431:
   765                           
   766                           ;digital_keypad.c: 29: }
   767                           ;digital_keypad.c: 31: return 0xFF;
   768  00107E  0EFF               	movlw	255
   769  001080  0012               	return	
   770  001082                     __end_of_read_digital_keypad:
   771                           	opt stack 0
   772                           tblptru	equ	0xFF8
   773                           tblptrh	equ	0xFF7
   774                           tblptrl	equ	0xFF6
   775                           tablat	equ	0xFF5
   776                           postinc0	equ	0xFEE
   777                           wreg	equ	0xFE8
   778                           status	equ	0xFD8
   779                           
   780 ;; *************** function _node_operation *****************
   781 ;; Defined at:
   782 ;;		line 65 in file "main.c"
   783 ;; Parameters:    Size  Location     Type
   784 ;;  key             1    wreg     unsigned char 
   785 ;; Auto vars:     Size  Location     Type
   786 ;;  key             1    6[BANK0 ] unsigned char 
   787 ;;  i               2    4[BANK0 ] unsigned short 
   788 ;;  temp            2    2[BANK0 ] unsigned short 
   789 ;;  rem             2    0[BANK0 ] unsigned short 
   790 ;; Return value:  Size  Location     Type
   791 ;;                  1    wreg      void 
   792 ;; Registers used:
   793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   794 ;; Tracked objects:
   795 ;;		On entry : 0/0
   796 ;;		On exit  : 0/0
   797 ;;		Unchanged: 0/0
   798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   799 ;;      Params:         0       0       0       0       0       0       0
   800 ;;      Locals:         0       7       0       0       0       0       0
   801 ;;      Temps:          2       0       0       0       0       0       0
   802 ;;      Totals:         2       7       0       0       0       0       0
   803 ;;Total ram usage:        9 bytes
   804 ;; Hardware stack levels used:    1
   805 ;; Hardware stack levels required when called:    4
   806 ;; This function calls:
   807 ;;		___lwdiv
   808 ;;		___lwmod
   809 ;;		_can_receive
   810 ;;		_can_transmit
   811 ;;		_construct_payload
   812 ;; This function is called by:
   813 ;;		_pick_to_light
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           	psect	text3
   818  000922                     __ptext3:
   819                           	opt stack 0
   820  000922                     _node_operation:
   821                           	opt stack 25
   822                           
   823                           ;incstack = 0
   824                           ;node_operation@key stored from wreg
   825  000922  0100               	movlb	0	; () banked
   826  000924  6F73               	movwf	node_operation@key& (0+255),b
   827                           
   828                           ;main.c: 67: static unsigned short r_data;
   829                           ;main.c: 68: static unsigned short wait;
   830                           ;main.c: 69: unsigned short temp,rem;
   831                           ;main.c: 70: unsigned short i;
   832                           ;main.c: 72: if (can_receive())
   833  000926  ECE1  F007         	call	_can_receive	;wreg free
   834  00092A  0900               	iorlw	0
   835  00092C  B4D8               	btfsc	status,2,c
   836  00092E  D00A               	goto	l2265
   837                           
   838                           ;main.c: 73: {
   839                           ;main.c: 75: message_received = 1;
   840  000930  804D               	bsf	_message_received/(0+8),_message_received& (0+7),c	;volatile
   841                           
   842                           ;main.c: 76: r_data = can_rx_payload[6];
   843  000932  C007  F014         	movff	_can_rx_payload+6,node_operation@r_data
   844  000936  6A15               	clrf	node_operation@r_data+1,c
   845                           
   846                           ;main.c: 77: r_data = (r_data << 8) | can_rx_payload[5];
   847  000938  5014               	movf	node_operation@r_data,w,c
   848  00093A  6E4A               	movwf	??_node_operation& (0+255),c
   849  00093C  5006               	movf	_can_rx_payload+5,w,c
   850  00093E  6E14               	movwf	node_operation@r_data,c
   851  000940  C04A  F015         	movff	??_node_operation,node_operation@r_data+1
   852  000944                     l2265:
   853                           
   854                           ;main.c: 78: }
   855                           ;main.c: 80: if (message_received == 1)
   856  000944  A04D               	btfss	_message_received/(0+8),_message_received& (0+7),c	;volatile
   857  000946  D09B               	goto	l2313
   858                           
   859                           ;main.c: 81: {
   860                           ;main.c: 82: i = 3;
   861  000948  0E00               	movlw	0
   862  00094A  0100               	movlb	0	; () banked
   863  00094C  6F72               	movwf	(node_operation@i+1)& (0+255),b
   864  00094E  0E03               	movlw	3
   865  000950  6F71               	movwf	node_operation@i& (0+255),b
   866                           
   867                           ; BSR set to: 0
   868                           ;main.c: 83: temp = r_data;
   869  000952  C014  F06F         	movff	node_operation@r_data,node_operation@temp
   870  000956  C015  F070         	movff	node_operation@r_data+1,node_operation@temp+1
   871  00095A                     l2271:
   872                           
   873                           ; BSR set to: 0
   874                           ;main.c: 85: {
   875                           ;main.c: 87: rem = temp % 10;
   876  00095A  C06F  F036         	movff	node_operation@temp,___lwmod@dividend
   877  00095E  C070  F037         	movff	node_operation@temp+1,___lwmod@dividend+1
   878  000962  0E00               	movlw	0
   879  000964  6E39               	movwf	___lwmod@divisor+1,c
   880  000966  0E0A               	movlw	10
   881  000968  6E38               	movwf	___lwmod@divisor,c
   882  00096A  EC02  F008         	call	___lwmod	;wreg free
   883  00096E  C036  F06D         	movff	?___lwmod,node_operation@rem
   884  000972  C037  F06E         	movff	?___lwmod+1,node_operation@rem+1
   885                           
   886                           ;main.c: 88: ssd[i] = digits[rem];
   887  000976  0E01               	movlw	low _digits
   888  000978  0100               	movlb	0	; () banked
   889  00097A  256D               	addwf	node_operation@rem& (0+255),w,b
   890  00097C  6EF6               	movwf	tblptrl,c
   891  00097E  0E06               	movlw	high _digits
   892  000980  216E               	addwfc	(node_operation@rem+1)& (0+255),w,b
   893  000982  6EF7               	movwf	tblptrh,c
   894  000984                     	if	0	;There are less than 3 active tblptr bytes
   895  000984                     	endif
   896  000984  0E1F               	movlw	low _ssd
   897  000986  0100               	movlb	0	; () banked
   898  000988  2571               	addwf	node_operation@i& (0+255),w,b
   899  00098A  6ED9               	movwf	fsr2l,c
   900  00098C  0E00               	movlw	high _ssd
   901  00098E  0100               	movlb	0	; () banked
   902  000990  2172               	addwfc	(node_operation@i+1)& (0+255),w,b
   903  000992  6EDA               	movwf	fsr2h,c
   904  000994  0008               	tblrd		*
   905  000996  CFF5 FFDF          	movff	tablat,indf2
   906                           
   907                           ; BSR set to: 0
   908                           ;main.c: 89: temp = temp / 10;
   909  00099A  C06F  F036         	movff	node_operation@temp,___lwdiv@dividend
   910  00099E  C070  F037         	movff	node_operation@temp+1,___lwdiv@dividend+1
   911  0009A2  0E00               	movlw	0
   912  0009A4  6E39               	movwf	___lwdiv@divisor+1,c
   913  0009A6  0E0A               	movlw	10
   914  0009A8  6E38               	movwf	___lwdiv@divisor,c
   915  0009AA  EC74  F007         	call	___lwdiv	;wreg free
   916  0009AE  C036  F06F         	movff	?___lwdiv,node_operation@temp
   917  0009B2  C037  F070         	movff	?___lwdiv+1,node_operation@temp+1
   918                           
   919                           ;main.c: 90: } while (i--);
   920  0009B6  0100               	movlb	0	; () banked
   921  0009B8  0771               	decf	node_operation@i& (0+255),f,b
   922  0009BA  A0D8               	btfss	status,0,c
   923  0009BC  0772               	decf	(node_operation@i+1)& (0+255),f,b
   924  0009BE  0100               	movlb	0	; () banked
   925  0009C0  2971               	incf	node_operation@i& (0+255),w,b
   926  0009C2  E1CB               	bnz	l2271
   927  0009C4  0100               	movlb	0	; () banked
   928  0009C6  2972               	incf	(node_operation@i+1)& (0+255),w,b
   929  0009C8  A4D8               	btfss	status,2,c
   930  0009CA  D7C7               	goto	l2271
   931                           
   932                           ; BSR set to: 0
   933                           ;main.c: 92: if (!wait)
   934                           
   935                           ; BSR set to: 0
   936  0009CC  5016               	movf	node_operation@wait,w,c
   937  0009CE  1017               	iorwf	node_operation@wait+1,w,c
   938  0009D0  A4D8               	btfss	status,2,c
   939  0009D2  D005               	goto	l2283
   940                           
   941                           ; BSR set to: 0
   942                           ;main.c: 93: {
   943                           ;main.c: 94: wait = 5;
   944  0009D4  0E00               	movlw	0
   945  0009D6  6E17               	movwf	node_operation@wait+1,c
   946  0009D8  0E05               	movlw	5
   947  0009DA  6E16               	movwf	node_operation@wait,c
   948                           
   949                           ;main.c: 95: }
   950  0009DC  D00F               	goto	l2289
   951  0009DE                     l2283:
   952                           
   953                           ; BSR set to: 0
   954                           ;main.c: 96: else
   955                           ;main.c: 97: {
   956                           ;main.c: 98: if (key == 0x07)
   957  0009DE  0E07               	movlw	7
   958  0009E0  0100               	movlb	0	; () banked
   959  0009E2  1973               	xorwf	node_operation@key& (0+255),w,b
   960  0009E4  A4D8               	btfss	status,2,c
   961  0009E6  D004               	goto	l123
   962                           
   963                           ; BSR set to: 0
   964                           ;main.c: 99: {
   965                           ;main.c: 100: wait = 5;
   966  0009E8  0E00               	movlw	0
   967  0009EA  6E17               	movwf	node_operation@wait+1,c
   968  0009EC  0E05               	movlw	5
   969  0009EE  6E16               	movwf	node_operation@wait,c
   970  0009F0                     l123:
   971                           
   972                           ; BSR set to: 0
   973                           ;main.c: 101: }
   974                           ;main.c: 102: key = 0x07;
   975  0009F0  0E07               	movlw	7
   976  0009F2  0100               	movlb	0	; () banked
   977  0009F4  6F73               	movwf	node_operation@key& (0+255),b
   978                           
   979                           ; BSR set to: 0
   980                           ;main.c: 103: wait--;
   981  0009F6  0616               	decf	node_operation@wait,f,c
   982  0009F8  A0D8               	btfss	status,0,c
   983  0009FA  0617               	decf	node_operation@wait+1,f,c
   984  0009FC                     l2289:
   985                           
   986                           ; BSR set to: 0
   987                           ;main.c: 104: }
   988                           ;main.c: 106: if (key == 0x06)
   989  0009FC  0E06               	movlw	6
   990  0009FE  0100               	movlb	0	; () banked
   991  000A00  1973               	xorwf	node_operation@key& (0+255),w,b
   992  000A02  A4D8               	btfss	status,2,c
   993  000A04  D009               	goto	l2295
   994                           
   995                           ; BSR set to: 0
   996                           ;main.c: 107: {
   997                           ;main.c: 110: if (r_data != 9999)
   998  000A06  0E0F               	movlw	15
   999  000A08  1814               	xorwf	node_operation@r_data,w,c
  1000  000A0A  E104               	bnz	u1500
  1001  000A0C  0E27               	movlw	39
  1002  000A0E  1815               	xorwf	node_operation@r_data+1,w,c
  1003  000A10  B4D8               	btfsc	status,2,c
  1004  000A12  D002               	goto	l2295
  1005  000A14                     u1500:
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;main.c: 111: r_data++;
  1009  000A14  4A14               	infsnz	node_operation@r_data,f,c
  1010  000A16  2A15               	incf	node_operation@r_data+1,f,c
  1011  000A18                     l2295:
  1012                           
  1013                           ; BSR set to: 0
  1014                           ;main.c: 112: }
  1015                           ;main.c: 114: if (key == 0x05)
  1016  000A18  0E05               	movlw	5
  1017  000A1A  0100               	movlb	0	; () banked
  1018  000A1C  1973               	xorwf	node_operation@key& (0+255),w,b
  1019  000A1E  A4D8               	btfss	status,2,c
  1020  000A20  D007               	goto	l2301
  1021                           
  1022                           ; BSR set to: 0
  1023                           ;main.c: 115: {
  1024                           ;main.c: 118: if(r_data != 0)
  1025  000A22  5014               	movf	node_operation@r_data,w,c
  1026  000A24  1015               	iorwf	node_operation@r_data+1,w,c
  1027  000A26  B4D8               	btfsc	status,2,c
  1028  000A28  D003               	goto	l2301
  1029                           
  1030                           ; BSR set to: 0
  1031                           ;main.c: 119: r_data--;
  1032  000A2A  0614               	decf	node_operation@r_data,f,c
  1033  000A2C  A0D8               	btfss	status,0,c
  1034  000A2E  0615               	decf	node_operation@r_data+1,f,c
  1035  000A30                     l2301:
  1036                           
  1037                           ; BSR set to: 0
  1038                           ;main.c: 120: }
  1039                           ;main.c: 122: if (key == 0x03)
  1040  000A30  0E03               	movlw	3
  1041  000A32  0100               	movlb	0	; () banked
  1042  000A34  1973               	xorwf	node_operation@key& (0+255),w,b
  1043  000A36  A4D8               	btfss	status,2,c
  1044  000A38  0012               	return	
  1045                           
  1046                           ; BSR set to: 0
  1047                           ;main.c: 123: {
  1048                           ;main.c: 124: construct_payload(r_data, 'A');
  1049  000A3A  C014  F043         	movff	node_operation@r_data,construct_payload@data
  1050  000A3E  C015  F044         	movff	node_operation@r_data+1,construct_payload@data+1
  1051  000A42  0E41               	movlw	65
  1052  000A44  6E45               	movwf	construct_payload@sign,c
  1053  000A46  EC6B  F006         	call	_construct_payload	;wreg free
  1054                           
  1055                           ;main.c: 125: can_transmit(can_tx_payload);
  1056  000A4A  0E60               	movlw	low _can_tx_payload
  1057  000A4C  6E36               	movwf	can_transmit@can_tx_payload,c
  1058  000A4E  0E00               	movlw	high _can_tx_payload
  1059  000A50  6E37               	movwf	can_transmit@can_tx_payload+1,c
  1060  000A52  EC48  F005         	call	_can_transmit	;wreg free
  1061                           
  1062                           ;main.c: 127: PORTEbits.RE0 = 1;
  1063  000A56  8084               	bsf	3972,0,c	;volatile
  1064                           
  1065                           ;main.c: 128: for (i = 5000; i--; );
  1066  000A58  0E13               	movlw	19
  1067  000A5A  0100               	movlb	0	; () banked
  1068  000A5C  6F72               	movwf	(node_operation@i+1)& (0+255),b
  1069  000A5E  0E88               	movlw	136
  1070  000A60  6F71               	movwf	node_operation@i& (0+255),b
  1071  000A62                     l2311:
  1072                           
  1073                           ; BSR set to: 0
  1074  000A62  0100               	movlb	0	; () banked
  1075  000A64  0771               	decf	node_operation@i& (0+255),f,b
  1076  000A66  A0D8               	btfss	status,0,c
  1077  000A68  0772               	decf	(node_operation@i+1)& (0+255),f,b
  1078  000A6A  0100               	movlb	0	; () banked
  1079  000A6C  2971               	incf	node_operation@i& (0+255),w,b
  1080  000A6E  E1F9               	bnz	l2311
  1081  000A70  0100               	movlb	0	; () banked
  1082  000A72  2972               	incf	(node_operation@i+1)& (0+255),w,b
  1083  000A74  A4D8               	btfss	status,2,c
  1084  000A76  D7F5               	goto	l2311
  1085                           
  1086                           ; BSR set to: 0
  1087                           ;main.c: 129: PORTEbits.RE0 = 0;
  1088  000A78  9084               	bcf	3972,0,c	;volatile
  1089                           
  1090                           ;main.c: 131: message_received = 0;
  1091  000A7A  904D               	bcf	_message_received/(0+8),_message_received& (0+7),c	;volatile
  1092                           
  1093                           ; BSR set to: 0
  1094                           ;main.c: 132: }
  1095                           ;main.c: 133: }
  1096  000A7C  0012               	return	
  1097  000A7E                     l2313:
  1098                           
  1099                           ;main.c: 134: else
  1100                           ;main.c: 135: {
  1101                           ;main.c: 136: ssd[0] = 0x00;
  1102  000A7E  0E00               	movlw	0
  1103  000A80  6E1F               	movwf	_ssd,c
  1104                           
  1105                           ;main.c: 137: ssd[1] = 0x00;
  1106  000A82  0E00               	movlw	0
  1107  000A84  6E20               	movwf	_ssd+1,c
  1108                           
  1109                           ;main.c: 138: ssd[2] = 0x00;
  1110  000A86  0E00               	movlw	0
  1111  000A88  6E21               	movwf	_ssd+2,c
  1112                           
  1113                           ;main.c: 139: ssd[3] = 0x00;
  1114  000A8A  0E00               	movlw	0
  1115  000A8C  6E22               	movwf	_ssd+3,c
  1116  000A8E  0012               	return	
  1117  000A90                     __end_of_node_operation:
  1118                           	opt stack 0
  1119                           tblptru	equ	0xFF8
  1120                           tblptrh	equ	0xFF7
  1121                           tblptrl	equ	0xFF6
  1122                           tablat	equ	0xFF5
  1123                           postinc0	equ	0xFEE
  1124                           wreg	equ	0xFE8
  1125                           indf2	equ	0xFDF
  1126                           fsr2h	equ	0xFDA
  1127                           fsr2l	equ	0xFD9
  1128                           status	equ	0xFD8
  1129                           
  1130 ;; *************** function _can_receive *****************
  1131 ;; Defined at:
  1132 ;;		line 53 in file "can.c"
  1133 ;; Parameters:    Size  Location     Type
  1134 ;;		None
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;		None
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  1    wreg      unsigned char 
  1139 ;; Registers used:
  1140 ;;		wreg
  1141 ;; Tracked objects:
  1142 ;;		On entry : 0/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1146 ;;      Params:         0       0       0       0       0       0       0
  1147 ;;      Locals:         0       0       0       0       0       0       0
  1148 ;;      Temps:          0       0       0       0       0       0       0
  1149 ;;      Totals:         0       0       0       0       0       0       0
  1150 ;;Total ram usage:        0 bytes
  1151 ;; Hardware stack levels used:    1
  1152 ;; Hardware stack levels required when called:    1
  1153 ;; This function calls:
  1154 ;;		Nothing
  1155 ;; This function is called by:
  1156 ;;		_node_operation
  1157 ;; This function uses a non-reentrant model
  1158 ;;
  1159                           
  1160                           	psect	text4
  1161  000FC2                     __ptext4:
  1162                           	opt stack 0
  1163  000FC2                     _can_receive:
  1164                           	opt stack 27
  1165                           
  1166                           ;can.c: 55: if (RXB0FUL)
  1167                           
  1168                           ;incstack = 0
  1169  000FC2  AE60               	btfss	3936,7,c	;volatile
  1170  000FC4  D01D               	goto	l2161
  1171                           
  1172                           ;can.c: 56: {
  1173                           ;can.c: 57: can_rx_payload[0] = RXB0EIDH;
  1174  000FC6  CF63 F001          	movff	3939,_can_rx_payload	;volatile
  1175                           
  1176                           ;can.c: 58: can_rx_payload[1] = RXB0EIDL;
  1177  000FCA  CF64 F002          	movff	3940,_can_rx_payload+1	;volatile
  1178                           
  1179                           ;can.c: 59: can_rx_payload[2] = RXB0SIDH;
  1180  000FCE  CF61 F003          	movff	3937,_can_rx_payload+2	;volatile
  1181                           
  1182                           ;can.c: 60: can_rx_payload[3] = RXB0SIDL;
  1183  000FD2  CF62 F004          	movff	3938,_can_rx_payload+3	;volatile
  1184                           
  1185                           ;can.c: 61: can_rx_payload[4] = RXB0DLC;
  1186  000FD6  CF65 F005          	movff	3941,_can_rx_payload+4	;volatile
  1187                           
  1188                           ;can.c: 62: can_rx_payload[5] = RXB0D0;
  1189  000FDA  CF66 F006          	movff	3942,_can_rx_payload+5	;volatile
  1190                           
  1191                           ;can.c: 63: can_rx_payload[6] = RXB0D1;
  1192  000FDE  CF67 F007          	movff	3943,_can_rx_payload+6	;volatile
  1193                           
  1194                           ;can.c: 64: can_rx_payload[7] = RXB0D2;
  1195  000FE2  CF68 F008          	movff	3944,_can_rx_payload+7	;volatile
  1196                           
  1197                           ;can.c: 65: can_rx_payload[8] = RXB0D3;
  1198  000FE6  CF69 F009          	movff	3945,_can_rx_payload+8	;volatile
  1199                           
  1200                           ;can.c: 66: can_rx_payload[9] = RXB0D4;
  1201  000FEA  CF6A F00A          	movff	3946,_can_rx_payload+9	;volatile
  1202                           
  1203                           ;can.c: 67: can_rx_payload[10] = RXB0D5;
  1204  000FEE  CF6B F00B          	movff	3947,_can_rx_payload+10	;volatile
  1205                           
  1206                           ;can.c: 68: can_rx_payload[11] = RXB0D6;
  1207  000FF2  CF6C F00C          	movff	3948,_can_rx_payload+11	;volatile
  1208                           
  1209                           ;can.c: 69: can_rx_payload[12] = RXB0D7;
  1210  000FF6  CF6D F00D          	movff	3949,_can_rx_payload+12	;volatile
  1211                           
  1212                           ;can.c: 71: RXB0FUL = 0;
  1213  000FFA  9E60               	bcf	3936,7,c	;volatile
  1214                           
  1215                           ;can.c: 73: return 1;
  1216  000FFC  0E01               	movlw	1
  1217                           
  1218                           ;can.c: 74: }
  1219  000FFE  0012               	return	
  1220  001000                     l2161:
  1221                           
  1222                           ;can.c: 75: else
  1223                           ;can.c: 76: {
  1224                           ;can.c: 77: return 0;
  1225  001000  0E00               	movlw	0
  1226  001002  0012               	return	
  1227  001004                     __end_of_can_receive:
  1228                           	opt stack 0
  1229                           tblptru	equ	0xFF8
  1230                           tblptrh	equ	0xFF7
  1231                           tblptrl	equ	0xFF6
  1232                           tablat	equ	0xFF5
  1233                           postinc0	equ	0xFEE
  1234                           wreg	equ	0xFE8
  1235                           indf2	equ	0xFDF
  1236                           fsr2h	equ	0xFDA
  1237                           fsr2l	equ	0xFD9
  1238                           status	equ	0xFD8
  1239                           
  1240 ;; *************** function _node_config *****************
  1241 ;; Defined at:
  1242 ;;		line 143 in file "main.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;  key             1    wreg     unsigned char 
  1245 ;;  mode            2   35[COMRAM] unsigned short 
  1246 ;; Auto vars:     Size  Location     Type
  1247 ;;  key             1    5[BANK0 ] unsigned char 
  1248 ;;  value           2    6[BANK0 ] unsigned short 
  1249 ;;  byte            1    2[BANK0 ] unsigned char 
  1250 ;;  i               2    3[BANK0 ] unsigned short 
  1251 ;; Return value:  Size  Location     Type
  1252 ;;                  2   35[COMRAM] unsigned short 
  1253 ;; Registers used:
  1254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1255 ;; Tracked objects:
  1256 ;;		On entry : 0/0
  1257 ;;		On exit  : 0/0
  1258 ;;		Unchanged: 0/0
  1259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1260 ;;      Params:         2       0       0       0       0       0       0
  1261 ;;      Locals:         0       6       0       0       0       0       0
  1262 ;;      Temps:          0       2       0       0       0       0       0
  1263 ;;      Totals:         2       8       0       0       0       0       0
  1264 ;;Total ram usage:       10 bytes
  1265 ;; Hardware stack levels used:    1
  1266 ;; Hardware stack levels required when called:    4
  1267 ;; This function calls:
  1268 ;;		_can_transmit
  1269 ;;		_construct_payload
  1270 ;;		_convert_to_short
  1271 ;;		_eeprom_at24c04_byte_write
  1272 ;; This function is called by:
  1273 ;;		_pick_to_light
  1274 ;; This function uses a non-reentrant model
  1275 ;;
  1276                           
  1277                           	psect	text5
  1278  00060C                     __ptext5:
  1279                           	opt stack 0
  1280  00060C                     _node_config:
  1281                           	opt stack 25
  1282                           
  1283                           ;incstack = 0
  1284                           ;node_config@key stored from wreg
  1285  00060C  0100               	movlb	0	; () banked
  1286  00060E  6F72               	movwf	node_config@key& (0+255),b
  1287                           
  1288                           ;main.c: 145: static unsigned short screen;
  1289                           ;main.c: 146: static bit sub_screen;
  1290                           ;main.c: 147: static unsigned char cur_segment = 3, j = 0;
  1291                           ;main.c: 148: static unsigned char count[4];
  1292                           ;main.c: 149: static unsigned short temp;
  1293                           ;main.c: 150: unsigned short i;
  1294                           ;main.c: 152: if (!sub_screen)
  1295  000610  B44D               	btfsc	node_config@sub_screen/(0+8),node_config@sub_screen& (0+7),c
  1296  000612  D030               	goto	l2335
  1297                           
  1298                           ;main.c: 153: {
  1299                           ;main.c: 154: if (key == 0x03)
  1300  000614  0E03               	movlw	3
  1301  000616  0100               	movlb	0	; () banked
  1302  000618  1972               	xorwf	node_config@key& (0+255),w,b
  1303  00061A  A4D8               	btfss	status,2,c
  1304  00061C  D00A               	goto	l2323
  1305                           
  1306                           ; BSR set to: 0
  1307                           ;main.c: 155: {
  1308                           ;main.c: 156: if (screen++ > 0)
  1309  00061E  4A10               	infsnz	node_config@screen,f,c
  1310  000620  2A11               	incf	node_config@screen+1,f,c
  1311  000622  0410               	decf	node_config@screen,w,c
  1312  000624  1011               	iorwf	node_config@screen+1,w,c
  1313  000626  B4D8               	btfsc	status,2,c
  1314  000628  D004               	goto	l2323
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;main.c: 157: {
  1318                           ;main.c: 158: screen = 0;
  1319  00062A  0E00               	movlw	0
  1320  00062C  6E11               	movwf	node_config@screen+1,c
  1321  00062E  0E00               	movlw	0
  1322  000630  6E10               	movwf	node_config@screen,c
  1323  000632                     l2323:
  1324                           
  1325                           ; BSR set to: 0
  1326                           ;main.c: 159: }
  1327                           ;main.c: 160: }
  1328                           ;main.c: 162: if (key == 0x05)
  1329  000632  0E05               	movlw	5
  1330  000634  0100               	movlb	0	; () banked
  1331  000636  1972               	xorwf	node_config@key& (0+255),w,b
  1332  000638  A4D8               	btfss	status,2,c
  1333  00063A  D007               	goto	l2329
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;main.c: 163: {
  1337                           ;main.c: 164: sub_screen = !sub_screen;
  1338  00063C  B44D               	btfsc	node_config@sub_screen/(0+8),node_config@sub_screen& (0+7),c
  1339  00063E  D002               	goto	u1590
  1340  000640  844D               	bsf	node_config@sub_screen/(0+8),node_config@sub_screen& (0+7),c
  1341  000642  D001               	goto	l2327
  1342  000644                     u1590:
  1343  000644  944D               	bcf	node_config@sub_screen/(0+8),node_config@sub_screen& (0+7),c
  1344  000646                     l2327:
  1345                           
  1346                           ;main.c: 165: cur_segment = 3;
  1347  000646  0E03               	movlw	3
  1348  000648  6E4E               	movwf	node_config@cur_segment,c
  1349  00064A                     l2329:
  1350                           
  1351                           ;main.c: 166: }
  1352                           ;main.c: 168: if (screen == 0)
  1353  00064A  5010               	movf	node_config@screen,w,c
  1354  00064C  1011               	iorwf	node_config@screen+1,w,c
  1355  00064E  A4D8               	btfss	status,2,c
  1356  000650  D008               	goto	l2333
  1357                           
  1358                           ;main.c: 169: {
  1359                           ;main.c: 170: ssd[0] = 0xE5;
  1360  000652  0EE5               	movlw	229
  1361  000654  6E1F               	movwf	_ssd,c
  1362                           
  1363                           ;main.c: 171: ssd[1] = 0x08;
  1364  000656  0E08               	movlw	8
  1365  000658  6E20               	movwf	_ssd+1,c
  1366                           
  1367                           ;main.c: 172: ssd[2] = 0x6E;
  1368  00065A  0E6E               	movlw	110
  1369  00065C  6E21               	movwf	_ssd+2,c
  1370                           
  1371                           ;main.c: 173: ssd[3] = 0xCC;
  1372  00065E  0ECC               	movlw	204
  1373  000660  D007               	goto	L1
  1374  000662                     l2333:
  1375                           
  1376                           ;main.c: 175: else
  1377                           ;main.c: 176: {
  1378                           ;main.c: 177: ssd[0] = 0xA8;
  1379  000662  0EA8               	movlw	168
  1380  000664  6E1F               	movwf	_ssd,c
  1381                           
  1382                           ;main.c: 178: ssd[1] = 0x08;
  1383  000666  0E08               	movlw	8
  1384  000668  6E20               	movwf	_ssd+1,c
  1385                           
  1386                           ;main.c: 179: ssd[2] = 0x80;
  1387  00066A  0E80               	movlw	128
  1388  00066C  6E21               	movwf	_ssd+2,c
  1389                           
  1390                           ;main.c: 180: ssd[3] = 0xE9;
  1391  00066E  0EE9               	movlw	233
  1392  000670                     L1:
  1393  000670  6E22               	movwf	_ssd+3,c
  1394                           
  1395                           ;main.c: 181: }
  1396                           ;main.c: 182: }
  1397  000672  D152               	goto	l2425
  1398  000674                     l2335:
  1399                           
  1400                           ;main.c: 183: else
  1401                           ;main.c: 184: {
  1402                           ;main.c: 185: if (screen == 0)
  1403  000674  5010               	movf	node_config@screen,w,c
  1404  000676  1011               	iorwf	node_config@screen+1,w,c
  1405  000678  A4D8               	btfss	status,2,c
  1406  00067A  D048               	goto	l2345
  1407                           
  1408                           ;main.c: 186: {
  1409                           ;main.c: 187: ssd[0] = digits[count[0]];
  1410  00067C  5023               	movf	node_config@count,w,c
  1411  00067E  0D01               	mullw	1
  1412  000680  0E01               	movlw	low _digits
  1413  000682  24F3               	addwf	prodl,w,c
  1414  000684  6EF6               	movwf	tblptrl,c
  1415  000686  0E06               	movlw	high _digits
  1416  000688  20F4               	addwfc	prodh,w,c
  1417  00068A  6EF7               	movwf	tblptrh,c
  1418  00068C                     	if	0	;There are less than 3 active tblptr bytes
  1419  00068C                     	endif
  1420  00068C  0008               	tblrd		*
  1421  00068E  CFF5 F01F          	movff	tablat,_ssd
  1422                           
  1423                           ;main.c: 188: ssd[1] = digits[count[1]];
  1424  000692  5024               	movf	node_config@count+1,w,c
  1425  000694  0D01               	mullw	1
  1426  000696  0E01               	movlw	low _digits
  1427  000698  24F3               	addwf	prodl,w,c
  1428  00069A  6EF6               	movwf	tblptrl,c
  1429  00069C  0E06               	movlw	high _digits
  1430  00069E  20F4               	addwfc	prodh,w,c
  1431  0006A0  6EF7               	movwf	tblptrh,c
  1432  0006A2                     	if	0	;There are less than 3 active tblptr bytes
  1433  0006A2                     	endif
  1434  0006A2  0008               	tblrd		*
  1435  0006A4  CFF5 F020          	movff	tablat,_ssd+1
  1436                           
  1437                           ;main.c: 189: ssd[2] = digits[count[2]];
  1438  0006A8  5025               	movf	node_config@count+2,w,c
  1439  0006AA  0D01               	mullw	1
  1440  0006AC  0E01               	movlw	low _digits
  1441  0006AE  24F3               	addwf	prodl,w,c
  1442  0006B0  6EF6               	movwf	tblptrl,c
  1443  0006B2  0E06               	movlw	high _digits
  1444  0006B4  20F4               	addwfc	prodh,w,c
  1445  0006B6  6EF7               	movwf	tblptrh,c
  1446  0006B8                     	if	0	;There are less than 3 active tblptr bytes
  1447  0006B8                     	endif
  1448  0006B8  0008               	tblrd		*
  1449  0006BA  CFF5 F021          	movff	tablat,_ssd+2
  1450                           
  1451                           ;main.c: 190: ssd[3] = digits[count[3]];
  1452  0006BE  5026               	movf	node_config@count+3,w,c
  1453  0006C0  0D01               	mullw	1
  1454  0006C2  0E01               	movlw	low _digits
  1455  0006C4  24F3               	addwf	prodl,w,c
  1456  0006C6  6EF6               	movwf	tblptrl,c
  1457  0006C8  0E06               	movlw	high _digits
  1458  0006CA  20F4               	addwfc	prodh,w,c
  1459  0006CC  6EF7               	movwf	tblptrh,c
  1460  0006CE                     	if	0	;There are less than 3 active tblptr bytes
  1461  0006CE                     	endif
  1462  0006CE  0008               	tblrd		*
  1463  0006D0  CFF5 F022          	movff	tablat,_ssd+3
  1464                           
  1465                           ;main.c: 192: if (key == 0x06)
  1466  0006D4  0E06               	movlw	6
  1467  0006D6  0100               	movlb	0	; () banked
  1468  0006D8  1972               	xorwf	node_config@key& (0+255),w,b
  1469  0006DA  A4D8               	btfss	status,2,c
  1470  0006DC  D062               	goto	l158
  1471                           
  1472                           ; BSR set to: 0
  1473                           ;main.c: 193: {
  1474                           ;main.c: 194: if (count[cur_segment]++ > 8)
  1475  0006DE  504E               	movf	node_config@cur_segment,w,c
  1476  0006E0  0D01               	mullw	1
  1477  0006E2  0E23               	movlw	low node_config@count
  1478  0006E4  24F3               	addwf	prodl,w,c
  1479  0006E6  6ED9               	movwf	fsr2l,c
  1480  0006E8  0E00               	movlw	high node_config@count
  1481  0006EA  20F4               	addwfc	prodh,w,c
  1482  0006EC  6EDA               	movwf	fsr2h,c
  1483  0006EE  CFDF F06D          	movff	indf2,??_node_config
  1484  0006F2  0E01               	movlw	1
  1485  0006F4  26DF               	addwf	indf2,f,c
  1486  0006F6  0E08               	movlw	8
  1487  0006F8  0100               	movlb	0	; () banked
  1488  0006FA  656D               	cpfsgt	??_node_config& (0+255),b
  1489  0006FC  D052               	goto	l158
  1490                           
  1491                           ; BSR set to: 0
  1492                           ;main.c: 195: {
  1493                           ;main.c: 196: count[cur_segment] = 0;
  1494  0006FE  504E               	movf	node_config@cur_segment,w,c
  1495  000700  0D01               	mullw	1
  1496  000702  0E23               	movlw	low node_config@count
  1497  000704  24F3               	addwf	prodl,w,c
  1498  000706  6ED9               	movwf	fsr2l,c
  1499  000708  0E00               	movlw	high node_config@count
  1500  00070A  D047               	goto	L2
  1501  00070C                     l2345:
  1502                           
  1503                           ;main.c: 200: else
  1504                           ;main.c: 201: {
  1505                           ;main.c: 202: ssd[0] = digits[node_id[0]];
  1506  00070C  501B               	movf	_node_id,w,c
  1507  00070E  0D01               	mullw	1
  1508  000710  0E01               	movlw	low _digits
  1509  000712  24F3               	addwf	prodl,w,c
  1510  000714  6EF6               	movwf	tblptrl,c
  1511  000716  0E06               	movlw	high _digits
  1512  000718  20F4               	addwfc	prodh,w,c
  1513  00071A  6EF7               	movwf	tblptrh,c
  1514  00071C                     	if	0	;There are less than 3 active tblptr bytes
  1515  00071C                     	endif
  1516  00071C  0008               	tblrd		*
  1517  00071E  CFF5 F01F          	movff	tablat,_ssd
  1518                           
  1519                           ;main.c: 203: ssd[1] = digits[node_id[1]];
  1520  000722  501C               	movf	_node_id+1,w,c
  1521  000724  0D01               	mullw	1
  1522  000726  0E01               	movlw	low _digits
  1523  000728  24F3               	addwf	prodl,w,c
  1524  00072A  6EF6               	movwf	tblptrl,c
  1525  00072C  0E06               	movlw	high _digits
  1526  00072E  20F4               	addwfc	prodh,w,c
  1527  000730  6EF7               	movwf	tblptrh,c
  1528  000732                     	if	0	;There are less than 3 active tblptr bytes
  1529  000732                     	endif
  1530  000732  0008               	tblrd		*
  1531  000734  CFF5 F020          	movff	tablat,_ssd+1
  1532                           
  1533                           ;main.c: 204: ssd[2] = digits[node_id[2]];
  1534  000738  501D               	movf	_node_id+2,w,c
  1535  00073A  0D01               	mullw	1
  1536  00073C  0E01               	movlw	low _digits
  1537  00073E  24F3               	addwf	prodl,w,c
  1538  000740  6EF6               	movwf	tblptrl,c
  1539  000742  0E06               	movlw	high _digits
  1540  000744  20F4               	addwfc	prodh,w,c
  1541  000746  6EF7               	movwf	tblptrh,c
  1542  000748                     	if	0	;There are less than 3 active tblptr bytes
  1543  000748                     	endif
  1544  000748  0008               	tblrd		*
  1545  00074A  CFF5 F021          	movff	tablat,_ssd+2
  1546                           
  1547                           ;main.c: 205: ssd[3] = digits[node_id[3]];
  1548  00074E  501E               	movf	_node_id+3,w,c
  1549  000750  0D01               	mullw	1
  1550  000752  0E01               	movlw	low _digits
  1551  000754  24F3               	addwf	prodl,w,c
  1552  000756  6EF6               	movwf	tblptrl,c
  1553  000758  0E06               	movlw	high _digits
  1554  00075A  20F4               	addwfc	prodh,w,c
  1555  00075C  6EF7               	movwf	tblptrh,c
  1556  00075E                     	if	0	;There are less than 3 active tblptr bytes
  1557  00075E                     	endif
  1558  00075E  0008               	tblrd		*
  1559  000760  CFF5 F022          	movff	tablat,_ssd+3
  1560                           
  1561                           ;main.c: 207: if (key == 0x06)
  1562  000764  0E06               	movlw	6
  1563  000766  0100               	movlb	0	; () banked
  1564  000768  1972               	xorwf	node_config@key& (0+255),w,b
  1565  00076A  A4D8               	btfss	status,2,c
  1566  00076C  D01A               	goto	l158
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;main.c: 208: {
  1570                           ;main.c: 209: if (node_id[cur_segment]++ > 8)
  1571  00076E  504E               	movf	node_config@cur_segment,w,c
  1572  000770  0D01               	mullw	1
  1573  000772  0E1B               	movlw	low _node_id
  1574  000774  24F3               	addwf	prodl,w,c
  1575  000776  6ED9               	movwf	fsr2l,c
  1576  000778  0E00               	movlw	high _node_id
  1577  00077A  20F4               	addwfc	prodh,w,c
  1578  00077C  6EDA               	movwf	fsr2h,c
  1579  00077E  CFDF F06D          	movff	indf2,??_node_config
  1580  000782  0E01               	movlw	1
  1581  000784  26DF               	addwf	indf2,f,c
  1582  000786  0E08               	movlw	8
  1583  000788  0100               	movlb	0	; () banked
  1584  00078A  656D               	cpfsgt	??_node_config& (0+255),b
  1585  00078C  D00A               	goto	l158
  1586                           
  1587                           ; BSR set to: 0
  1588                           ;main.c: 210: {
  1589                           ;main.c: 211: node_id[cur_segment] = 0;
  1590  00078E  504E               	movf	node_config@cur_segment,w,c
  1591  000790  0D01               	mullw	1
  1592  000792  0E1B               	movlw	low _node_id
  1593  000794  24F3               	addwf	prodl,w,c
  1594  000796  6ED9               	movwf	fsr2l,c
  1595  000798  0E00               	movlw	high _node_id
  1596  00079A                     L2:
  1597  00079A  20F4               	addwfc	prodh,w,c
  1598  00079C  6EDA               	movwf	fsr2h,c
  1599  00079E  0E00               	movlw	0
  1600  0007A0  6EDF               	movwf	indf2,c
  1601  0007A2                     l158:
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;main.c: 212: }
  1605                           ;main.c: 213: }
  1606                           ;main.c: 214: }
  1607                           ;main.c: 216: ssd[cur_segment] |= 0x10;
  1608  0007A2  504E               	movf	node_config@cur_segment,w,c
  1609  0007A4  0D01               	mullw	1
  1610  0007A6  0E1F               	movlw	low _ssd
  1611  0007A8  24F3               	addwf	prodl,w,c
  1612  0007AA  6ED9               	movwf	fsr2l,c
  1613  0007AC  0E00               	movlw	high _ssd
  1614  0007AE  20F4               	addwfc	prodh,w,c
  1615  0007B0  6EDA               	movwf	fsr2h,c
  1616  0007B2  0E00               	movlw	0
  1617  0007B4  88DB               	bsf	plusw2,4,c
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;main.c: 218: if (key == 0x05)
  1621  0007B6  0E05               	movlw	5
  1622  0007B8  0100               	movlb	0	; () banked
  1623  0007BA  1972               	xorwf	node_config@key& (0+255),w,b
  1624  0007BC  A4D8               	btfss	status,2,c
  1625  0007BE  D01A               	goto	l2367
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;main.c: 219: {
  1629                           ;main.c: 221: ssd[cur_segment] &= 0xEF;
  1630  0007C0  504E               	movf	node_config@cur_segment,w,c
  1631  0007C2  0D01               	mullw	1
  1632  0007C4  0E1F               	movlw	low _ssd
  1633  0007C6  24F3               	addwf	prodl,w,c
  1634  0007C8  6ED9               	movwf	fsr2l,c
  1635  0007CA  0E00               	movlw	high _ssd
  1636  0007CC  20F4               	addwfc	prodh,w,c
  1637  0007CE  6EDA               	movwf	fsr2h,c
  1638  0007D0  0EEF               	movlw	239
  1639  0007D2  16DF               	andwf	indf2,f,c
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;main.c: 222: if((cur_segment > 0) && (cur_segment <= 3))
  1643  0007D4  504E               	movf	node_config@cur_segment,w,c
  1644  0007D6  B4D8               	btfsc	status,2,c
  1645  0007D8  D004               	goto	l162
  1646                           
  1647                           ; BSR set to: 0
  1648  0007DA  0E04               	movlw	4
  1649  0007DC  604E               	cpfslt	node_config@cur_segment,c
  1650  0007DE  D001               	goto	l162
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;main.c: 223: cur_segment--;
  1654  0007E0  064E               	decf	node_config@cur_segment,f,c
  1655  0007E2                     l162:
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;main.c: 224: j++;
  1659  0007E2  2A1A               	incf	node_config@j,f,c
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;main.c: 225: if(j==4)
  1663  0007E4  0E04               	movlw	4
  1664  0007E6  181A               	xorwf	node_config@j,w,c
  1665  0007E8  A4D8               	btfss	status,2,c
  1666  0007EA  D004               	goto	l2367
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;main.c: 226: {
  1670                           ;main.c: 227: cur_segment =3;
  1671  0007EC  0E03               	movlw	3
  1672  0007EE  6E4E               	movwf	node_config@cur_segment,c
  1673                           
  1674                           ;main.c: 228: j=0;
  1675  0007F0  0E00               	movlw	0
  1676  0007F2  6E1A               	movwf	node_config@j,c
  1677  0007F4                     l2367:
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;main.c: 229: }
  1681                           ;main.c: 230: }
  1682                           ;main.c: 231: if (key == 0x03)
  1683  0007F4  0E03               	movlw	3
  1684  0007F6  0100               	movlb	0	; () banked
  1685  0007F8  1972               	xorwf	node_config@key& (0+255),w,b
  1686  0007FA  A4D8               	btfss	status,2,c
  1687  0007FC  D08D               	goto	l2425
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;main.c: 232: {
  1691                           ;main.c: 234: unsigned char byte;
  1692                           ;main.c: 235: unsigned short value;
  1693                           ;main.c: 236: if(screen == 0)
  1694  0007FE  5010               	movf	node_config@screen,w,c
  1695  000800  1011               	iorwf	node_config@screen+1,w,c
  1696  000802  A4D8               	btfss	status,2,c
  1697  000804  D045               	goto	l2393
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;main.c: 237: {
  1701                           ;main.c: 238: value=convert_to_short(count);
  1702  000806  0E23               	movlw	low node_config@count
  1703  000808  6E3C               	movwf	convert_to_short@data,c
  1704  00080A  0E00               	movlw	high node_config@count
  1705  00080C  6E3D               	movwf	convert_to_short@data+1,c
  1706  00080E  ECE3  F006         	call	_convert_to_short	;wreg free
  1707  000812  C03C  F073         	movff	?_convert_to_short,node_config@value
  1708  000816  C03D  F074         	movff	?_convert_to_short+1,node_config@value+1
  1709                           
  1710                           ;main.c: 239: construct_payload(value,'U');
  1711  00081A  C073  F043         	movff	node_config@value,construct_payload@data
  1712  00081E  C074  F044         	movff	node_config@value+1,construct_payload@data+1
  1713  000822  0E55               	movlw	85
  1714  000824  6E45               	movwf	construct_payload@sign,c
  1715  000826  EC6B  F006         	call	_construct_payload	;wreg free
  1716                           
  1717                           ;main.c: 240: can_transmit(can_tx_payload);
  1718  00082A  0E60               	movlw	low _can_tx_payload
  1719  00082C  6E36               	movwf	can_transmit@can_tx_payload,c
  1720  00082E  0E00               	movlw	high _can_tx_payload
  1721  000830  6E37               	movwf	can_transmit@can_tx_payload+1,c
  1722  000832  EC48  F005         	call	_can_transmit	;wreg free
  1723                           
  1724                           ;main.c: 242: PORTEbits.RE0 = 1;
  1725  000836  8084               	bsf	3972,0,c	;volatile
  1726                           
  1727                           ;main.c: 243: for (i = 5000; i--; );
  1728  000838  0E13               	movlw	19
  1729  00083A  0100               	movlb	0	; () banked
  1730  00083C  6F71               	movwf	(node_config@i+1)& (0+255),b
  1731  00083E  0E88               	movlw	136
  1732  000840  6F70               	movwf	node_config@i& (0+255),b
  1733  000842                     l2379:
  1734                           
  1735                           ; BSR set to: 0
  1736  000842  0100               	movlb	0	; () banked
  1737  000844  0770               	decf	node_config@i& (0+255),f,b
  1738  000846  A0D8               	btfss	status,0,c
  1739  000848  0771               	decf	(node_config@i+1)& (0+255),f,b
  1740  00084A  0100               	movlb	0	; () banked
  1741  00084C  2970               	incf	node_config@i& (0+255),w,b
  1742  00084E  E1F9               	bnz	l2379
  1743  000850  0100               	movlb	0	; () banked
  1744  000852  2971               	incf	(node_config@i+1)& (0+255),w,b
  1745  000854  A4D8               	btfss	status,2,c
  1746  000856  D7F5               	goto	l2379
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;main.c: 244: PORTEbits.RE0 = 0;
  1750  000858  9084               	bcf	3972,0,c	;volatile
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;main.c: 246: for(i = 0; i < 4; i++ )
  1754  00085A  0E00               	movlw	0
  1755  00085C  0100               	movlb	0	; () banked
  1756  00085E  6F71               	movwf	(node_config@i+1)& (0+255),b
  1757  000860  0E00               	movlw	0
  1758  000862  6F70               	movwf	node_config@i& (0+255),b
  1759  000864                     l2383:
  1760                           
  1761                           ; BSR set to: 0
  1762  000864  0100               	movlb	0	; () banked
  1763  000866  5171               	movf	(node_config@i+1)& (0+255),w,b
  1764  000868  E14C               	bnz	l2419
  1765  00086A  0E04               	movlw	4
  1766  00086C  0100               	movlb	0	; () banked
  1767  00086E  5D70               	subwf	node_config@i& (0+255),w,b
  1768  000870  B0D8               	btfsc	status,0,c
  1769  000872  D047               	goto	l2419
  1770                           
  1771                           ; BSR set to: 0
  1772                           ;main.c: 247: count[i] = 0;
  1773                           
  1774                           ; BSR set to: 0
  1775                           
  1776                           ; BSR set to: 0
  1777  000874  0E23               	movlw	low node_config@count
  1778  000876  0100               	movlb	0	; () banked
  1779  000878  2570               	addwf	node_config@i& (0+255),w,b
  1780  00087A  6ED9               	movwf	fsr2l,c
  1781  00087C  0E00               	movlw	high node_config@count
  1782  00087E  0100               	movlb	0	; () banked
  1783  000880  2171               	addwfc	(node_config@i+1)& (0+255),w,b
  1784  000882  6EDA               	movwf	fsr2h,c
  1785  000884  0E00               	movlw	0
  1786  000886  6EDF               	movwf	indf2,c
  1787                           
  1788                           ; BSR set to: 0
  1789  000888  0100               	movlb	0	; () banked
  1790  00088A  4B70               	infsnz	node_config@i& (0+255),f,b
  1791  00088C  2B71               	incf	(node_config@i+1)& (0+255),f,b
  1792  00088E  D7EA               	goto	l2383
  1793  000890                     l2393:
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;main.c: 250: else
  1797                           ;main.c: 251: {
  1798                           ;main.c: 252: value = convert_to_short(node_id);
  1799  000890  0E1B               	movlw	low _node_id
  1800  000892  6E3C               	movwf	convert_to_short@data,c
  1801  000894  0E00               	movlw	high _node_id
  1802  000896  6E3D               	movwf	convert_to_short@data+1,c
  1803  000898  ECE3  F006         	call	_convert_to_short	;wreg free
  1804  00089C  C03C  F073         	movff	?_convert_to_short,node_config@value
  1805  0008A0  C03D  F074         	movff	?_convert_to_short+1,node_config@value+1
  1806                           
  1807                           ;main.c: 253: byte = (value >> 8) & 0xFF;
  1808  0008A4  0100               	movlb	0	; () banked
  1809  0008A6  5174               	movf	(node_config@value+1)& (0+255),w,b
  1810  0008A8  0100               	movlb	0	; () banked
  1811  0008AA  6F6F               	movwf	node_config@byte& (0+255),b
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;main.c: 254: eeprom_at24c04_byte_write(0x01,byte);
  1815  0008AC  C06F  F039         	movff	node_config@byte,eeprom_at24c04_byte_write@data
  1816  0008B0  0E01               	movlw	1
  1817  0008B2  EC80  F008         	call	_eeprom_at24c04_byte_write
  1818                           
  1819                           ;main.c: 255: byte = (value << 0) & 0xFF;
  1820  0008B6  C073  F06F         	movff	node_config@value,node_config@byte
  1821                           
  1822                           ;main.c: 256: eeprom_at24c04_byte_write(0x00,byte);
  1823  0008BA  C06F  F039         	movff	node_config@byte,eeprom_at24c04_byte_write@data
  1824  0008BE  0E00               	movlw	0
  1825  0008C0  EC80  F008         	call	_eeprom_at24c04_byte_write
  1826                           
  1827                           ;main.c: 258: { CANCON &= 0x1F; CANCON |= e_can_op_mode_config; };
  1828  0008C4  0E1F               	movlw	31
  1829  0008C6  166F               	andwf	3951,f,c	;volatile
  1830  0008C8  8E6F               	bsf	3951,7,c	;volatile
  1831                           
  1832                           ;main.c: 260: value = value << 5;
  1833  0008CA  C073  F06D         	movff	node_config@value,??_node_config
  1834  0008CE  C074  F06E         	movff	node_config@value+1,??_node_config+1
  1835  0008D2  0E05               	movlw	5
  1836  0008D4                     u1765:
  1837  0008D4  90D8               	bcf	status,0,c
  1838  0008D6  0100               	movlb	0	; () banked
  1839  0008D8  376D               	rlcf	??_node_config& (0+255),f,b
  1840  0008DA  376E               	rlcf	(??_node_config+1)& (0+255),f,b
  1841  0008DC  2EE8               	decfsz	wreg,f,c
  1842  0008DE  D7FA               	goto	u1765
  1843  0008E0  C06D  F073         	movff	??_node_config,node_config@value
  1844  0008E4  C06E  F074         	movff	??_node_config+1,node_config@value+1
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;main.c: 262: RXF0SIDH = (value >> 8) & 0xFF;
  1848  0008E8  0100               	movlb	0	; () banked
  1849  0008EA  5174               	movf	(node_config@value+1)& (0+255),w,b
  1850  0008EC  010F               	movlb	15	; () banked
  1851  0008EE  6F00               	movwf	0,b	;volatile
  1852                           
  1853                           ; BSR set to: 15
  1854                           ;main.c: 263: RXF0SIDL = (value >> 0) & 0xFF;
  1855  0008F0  C073  FF01         	movff	node_config@value,3841	;volatile
  1856                           
  1857                           ; BSR set to: 15
  1858                           ;main.c: 266: { CANCON &= 0x1F; CANCON |= e_can_op_mode_normal; };
  1859  0008F4  0E1F               	movlw	31
  1860  0008F6  166F               	andwf	3951,f,c	;volatile
  1861                           
  1862                           ; BSR set to: 15
  1863  0008F8  506F               	movf	3951,w,c	;volatile
  1864                           
  1865                           ; BSR set to: 15
  1866                           ;main.c: 267: screen=0;
  1867  0008FA  0E00               	movlw	0
  1868  0008FC  6E11               	movwf	node_config@screen+1,c
  1869  0008FE  0E00               	movlw	0
  1870  000900  6E10               	movwf	node_config@screen,c
  1871  000902                     l2419:
  1872                           
  1873                           ;main.c: 269: }
  1874                           ;main.c: 270: message_received = 0;
  1875  000902  904D               	bcf	_message_received/(0+8),_message_received& (0+7),c	;volatile
  1876                           
  1877                           ;main.c: 271: sub_screen = 0;
  1878  000904  944D               	bcf	node_config@sub_screen/(0+8),node_config@sub_screen& (0+7),c
  1879                           
  1880                           ;main.c: 272: mode = !mode;
  1881  000906  504A               	movf	node_config@mode,w,c
  1882  000908  104B               	iorwf	node_config@mode+1,w,c
  1883  00090A  A4D8               	btfss	status,2,c
  1884  00090C  D002               	goto	u1770
  1885  00090E  0E01               	movlw	1
  1886  000910  D001               	goto	u1780
  1887  000912                     u1770:
  1888  000912  0E00               	movlw	0
  1889  000914                     u1780:
  1890  000914  6E4A               	movwf	node_config@mode,c
  1891  000916  6A4B               	clrf	node_config@mode+1,c
  1892  000918                     l2425:
  1893                           
  1894                           ;main.c: 274: }
  1895                           ;main.c: 275: }
  1896                           ;main.c: 277: return mode;
  1897  000918  C04A  F04A         	movff	node_config@mode,?_node_config
  1898  00091C  C04B  F04B         	movff	node_config@mode+1,?_node_config+1
  1899  000920  0012               	return	
  1900  000922                     __end_of_node_config:
  1901                           	opt stack 0
  1902                           tblptru	equ	0xFF8
  1903                           tblptrh	equ	0xFF7
  1904                           tblptrl	equ	0xFF6
  1905                           tablat	equ	0xFF5
  1906                           prodh	equ	0xFF4
  1907                           prodl	equ	0xFF3
  1908                           postinc0	equ	0xFEE
  1909                           wreg	equ	0xFE8
  1910                           indf2	equ	0xFDF
  1911                           plusw2	equ	0xFDB
  1912                           fsr2h	equ	0xFDA
  1913                           fsr2l	equ	0xFD9
  1914                           status	equ	0xFD8
  1915                           
  1916 ;; *************** function _eeprom_at24c04_byte_write *****************
  1917 ;; Defined at:
  1918 ;;		line 32 in file "at24c04.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;  memory_loc      1    wreg     unsigned char 
  1921 ;;  data            1   18[COMRAM] unsigned char 
  1922 ;; Auto vars:     Size  Location     Type
  1923 ;;  memory_loc      1   19[COMRAM] unsigned char 
  1924 ;; Return value:  Size  Location     Type
  1925 ;;                  1    wreg      void 
  1926 ;; Registers used:
  1927 ;;		wreg, status,2, cstack
  1928 ;; Tracked objects:
  1929 ;;		On entry : 0/0
  1930 ;;		On exit  : 0/0
  1931 ;;		Unchanged: 0/0
  1932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1933 ;;      Params:         1       0       0       0       0       0       0
  1934 ;;      Locals:         1       0       0       0       0       0       0
  1935 ;;      Temps:          0       0       0       0       0       0       0
  1936 ;;      Totals:         2       0       0       0       0       0       0
  1937 ;;Total ram usage:        2 bytes
  1938 ;; Hardware stack levels used:    1
  1939 ;; Hardware stack levels required when called:    3
  1940 ;; This function calls:
  1941 ;;		_delay_ms
  1942 ;;		_i2c_start
  1943 ;;		_i2c_stop
  1944 ;;		_i2c_write
  1945 ;; This function is called by:
  1946 ;;		_node_config
  1947 ;; This function uses a non-reentrant model
  1948 ;;
  1949                           
  1950                           	psect	text6
  1951  001100                     __ptext6:
  1952                           	opt stack 0
  1953  001100                     _eeprom_at24c04_byte_write:
  1954                           	opt stack 25
  1955                           
  1956                           ;incstack = 0
  1957                           ;eeprom_at24c04_byte_write@memory_loc stored from wreg
  1958  001100  6E3A               	movwf	eeprom_at24c04_byte_write@memory_loc,c
  1959                           
  1960                           ;at24c04.c: 34: i2c_start();
  1961  001102  ECCB  F008         	call	_i2c_start	;wreg free
  1962                           
  1963                           ;at24c04.c: 35: i2c_write(0xA0);
  1964  001106  0EA0               	movlw	160
  1965  001108  ECB2  F008         	call	_i2c_write
  1966                           
  1967                           ;at24c04.c: 36: i2c_write(memory_loc);
  1968  00110C  503A               	movf	eeprom_at24c04_byte_write@memory_loc,w,c
  1969  00110E  ECB2  F008         	call	_i2c_write
  1970                           
  1971                           ;at24c04.c: 37: i2c_write(data);
  1972  001112  5039               	movf	eeprom_at24c04_byte_write@data,w,c
  1973  001114  ECB2  F008         	call	_i2c_write
  1974                           
  1975                           ;at24c04.c: 38: i2c_stop();
  1976  001118  ECC7  F008         	call	_i2c_stop	;wreg free
  1977                           
  1978                           ;at24c04.c: 40: delay_ms(5);
  1979  00111C  0E05               	movlw	5
  1980  00111E  EC92  F008         	call	_delay_ms
  1981  001122  0012               	return		;funcret
  1982  001124                     __end_of_eeprom_at24c04_byte_write:
  1983                           	opt stack 0
  1984                           tblptru	equ	0xFF8
  1985                           tblptrh	equ	0xFF7
  1986                           tblptrl	equ	0xFF6
  1987                           tablat	equ	0xFF5
  1988                           prodh	equ	0xFF4
  1989                           prodl	equ	0xFF3
  1990                           postinc0	equ	0xFEE
  1991                           wreg	equ	0xFE8
  1992                           indf2	equ	0xFDF
  1993                           plusw2	equ	0xFDB
  1994                           fsr2h	equ	0xFDA
  1995                           fsr2l	equ	0xFD9
  1996                           status	equ	0xFD8
  1997                           
  1998 ;; *************** function _delay_ms *****************
  1999 ;; Defined at:
  2000 ;;		line 10 in file "delay.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;  count           1    wreg     unsigned char 
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;  count           1   15[COMRAM] unsigned char 
  2005 ;;  _dcnt           1   17[COMRAM] unsigned char 
  2006 ;;  i               1   16[COMRAM] unsigned char 
  2007 ;; Return value:  Size  Location     Type
  2008 ;;                  1    wreg      void 
  2009 ;; Registers used:
  2010 ;;		wreg, status,2
  2011 ;; Tracked objects:
  2012 ;;		On entry : 0/0
  2013 ;;		On exit  : 0/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2016 ;;      Params:         0       0       0       0       0       0       0
  2017 ;;      Locals:         3       0       0       0       0       0       0
  2018 ;;      Temps:          0       0       0       0       0       0       0
  2019 ;;      Totals:         3       0       0       0       0       0       0
  2020 ;;Total ram usage:        3 bytes
  2021 ;; Hardware stack levels used:    1
  2022 ;; Hardware stack levels required when called:    1
  2023 ;; This function calls:
  2024 ;;		Nothing
  2025 ;; This function is called by:
  2026 ;;		_eeprom_at24c04_byte_write
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030                           	psect	text7
  2031  001124                     __ptext7:
  2032                           	opt stack 0
  2033  001124                     _delay_ms:
  2034                           	opt stack 26
  2035                           
  2036                           ;incstack = 0
  2037                           ;delay_ms@count stored from wreg
  2038  001124  6E36               	movwf	delay_ms@count,c
  2039  001126                     
  2040                           ;delay.c: 23: {
  2041                           ;delay.c: 24: i = 4;
  2042  001126  0E04               	movlw	4
  2043  001128  6E37               	movwf	delay_ms@i,c
  2044  00112A                     l201:
  2045                           
  2046                           ;delay.c: 26: {
  2047                           ;delay.c: 27: { unsigned char _dcnt; _dcnt = (250)*((20*1000L)/(12*1000L)); while(--_dcn
      +                          t != 0) continue; };
  2048  00112A  0EFA               	movlw	250
  2049  00112C  6E38               	movwf	delay_ms@_dcnt,c
  2050  00112E                     l202:
  2051  00112E  2E38               	decfsz	delay_ms@_dcnt,f,c
  2052  001130  D7FE               	goto	l202
  2053                           
  2054                           ;delay.c: 28: }
  2055                           ;delay.c: 29: while(--i);
  2056  001132  2E37               	decfsz	delay_ms@i,f,c
  2057  001134  D7FA               	goto	l201
  2058                           
  2059                           ;delay.c: 30: }
  2060                           ;delay.c: 31: while(--count);
  2061  001136  2E36               	decfsz	delay_ms@count,f,c
  2062  001138  D7F6               	goto	l2081
  2063  00113A  0012               	return	
  2064  00113C                     __end_of_delay_ms:
  2065                           	opt stack 0
  2066                           tblptru	equ	0xFF8
  2067                           tblptrh	equ	0xFF7
  2068                           tblptrl	equ	0xFF6
  2069                           tablat	equ	0xFF5
  2070                           prodh	equ	0xFF4
  2071                           prodl	equ	0xFF3
  2072                           postinc0	equ	0xFEE
  2073                           wreg	equ	0xFE8
  2074                           indf2	equ	0xFDF
  2075                           plusw2	equ	0xFDB
  2076                           fsr2h	equ	0xFDA
  2077                           fsr2l	equ	0xFD9
  2078                           status	equ	0xFD8
  2079                           
  2080 ;; *************** function _construct_payload *****************
  2081 ;; Defined at:
  2082 ;;		line 39 in file "main.c"
  2083 ;; Parameters:    Size  Location     Type
  2084 ;;  data            2   28[COMRAM] unsigned short 
  2085 ;;  sign            1   30[COMRAM] unsigned char 
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;  temp            2   33[COMRAM] unsigned short 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  1    wreg      void 
  2090 ;; Registers used:
  2091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2097 ;;      Params:         3       0       0       0       0       0       0
  2098 ;;      Locals:         2       0       0       0       0       0       0
  2099 ;;      Temps:          2       0       0       0       0       0       0
  2100 ;;      Totals:         7       0       0       0       0       0       0
  2101 ;;Total ram usage:        7 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    3
  2104 ;; This function calls:
  2105 ;;		_convert_to_short
  2106 ;; This function is called by:
  2107 ;;		_node_operation
  2108 ;;		_node_config
  2109 ;; This function uses a non-reentrant model
  2110 ;;
  2111                           
  2112                           	psect	text8
  2113  000CD6                     __ptext8:
  2114                           	opt stack 0
  2115  000CD6                     _construct_payload:
  2116                           	opt stack 25
  2117                           
  2118                           ;main.c: 41: unsigned short temp;
  2119                           ;main.c: 43: can_tx_payload[0] = 0x00;
  2120                           
  2121                           ;incstack = 0
  2122  000CD6  0E00               	movlw	0
  2123  000CD8  0100               	movlb	0	; () banked
  2124  000CDA  6F60               	movwf	_can_tx_payload& (0+255),b
  2125                           
  2126                           ;main.c: 44: can_tx_payload[1] = 0x00;
  2127  000CDC  0E00               	movlw	0
  2128  000CDE  0100               	movlb	0	; () banked
  2129  000CE0  6F61               	movwf	(_can_tx_payload+1)& (0+255),b
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;main.c: 46: temp = convert_to_short(node_id);
  2133  000CE2  0E1B               	movlw	low _node_id
  2134  000CE4  6E3C               	movwf	convert_to_short@data,c
  2135  000CE6  0E00               	movlw	high _node_id
  2136  000CE8  6E3D               	movwf	convert_to_short@data+1,c
  2137  000CEA  ECE3  F006         	call	_convert_to_short	;wreg free
  2138  000CEE  C03C  F048         	movff	?_convert_to_short,construct_payload@temp
  2139  000CF2  C03D  F049         	movff	?_convert_to_short+1,construct_payload@temp+1
  2140                           
  2141                           ;main.c: 48: temp = temp << 5;
  2142  000CF6  C048  F046         	movff	construct_payload@temp,??_construct_payload
  2143  000CFA  C049  F047         	movff	construct_payload@temp+1,??_construct_payload+1
  2144  000CFE  0E05               	movlw	5
  2145  000D00                     u1355:
  2146  000D00  90D8               	bcf	status,0,c
  2147  000D02  3646               	rlcf	??_construct_payload,f,c
  2148  000D04  3647               	rlcf	??_construct_payload+1,f,c
  2149  000D06  2EE8               	decfsz	wreg,f,c
  2150  000D08  D7FB               	goto	u1355
  2151  000D0A  C046  F048         	movff	??_construct_payload,construct_payload@temp
  2152  000D0E  C047  F049         	movff	??_construct_payload+1,construct_payload@temp+1
  2153                           
  2154                           ;main.c: 50: can_tx_payload[2] = (temp >> 8) & 0xFF;
  2155  000D12  5049               	movf	construct_payload@temp+1,w,c
  2156  000D14  0100               	movlb	0	; () banked
  2157  000D16  6F62               	movwf	(_can_tx_payload+2)& (0+255),b
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;main.c: 51: can_tx_payload[3] = (temp >> 0) & 0xFF;
  2161  000D18  C048  F063         	movff	construct_payload@temp,_can_tx_payload+3
  2162                           
  2163                           ; BSR set to: 0
  2164                           ;main.c: 53: can_tx_payload[4] = 3;
  2165  000D1C  0E03               	movlw	3
  2166  000D1E  0100               	movlb	0	; () banked
  2167  000D20  6F64               	movwf	(_can_tx_payload+4)& (0+255),b
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;main.c: 55: can_tx_payload[5] = sign;
  2171  000D22  C045  F065         	movff	construct_payload@sign,_can_tx_payload+5
  2172                           
  2173                           ; BSR set to: 0
  2174                           ;main.c: 56: can_tx_payload[6] = (data >> 0) & 0xFF;
  2175  000D26  C043  F066         	movff	construct_payload@data,_can_tx_payload+6
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;main.c: 57: can_tx_payload[7] = (data >> 8) & 0xFF;
  2179  000D2A  5044               	movf	construct_payload@data+1,w,c
  2180  000D2C  0100               	movlb	0	; () banked
  2181  000D2E  6F67               	movwf	(_can_tx_payload+7)& (0+255),b
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;main.c: 58: can_tx_payload[8] = 0;
  2185  000D30  0E00               	movlw	0
  2186  000D32  0100               	movlb	0	; () banked
  2187  000D34  6F68               	movwf	(_can_tx_payload+8)& (0+255),b
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;main.c: 59: can_tx_payload[9] = 0;
  2191  000D36  0E00               	movlw	0
  2192  000D38  0100               	movlb	0	; () banked
  2193  000D3A  6F69               	movwf	(_can_tx_payload+9)& (0+255),b
  2194                           
  2195                           ; BSR set to: 0
  2196                           ;main.c: 60: can_tx_payload[10] = 0;
  2197  000D3C  0E00               	movlw	0
  2198  000D3E  0100               	movlb	0	; () banked
  2199  000D40  6F6A               	movwf	(_can_tx_payload+10)& (0+255),b
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;main.c: 61: can_tx_payload[11] = 0;
  2203  000D42  0E00               	movlw	0
  2204  000D44  0100               	movlb	0	; () banked
  2205  000D46  6F6B               	movwf	(_can_tx_payload+11)& (0+255),b
  2206                           
  2207                           ; BSR set to: 0
  2208                           ;main.c: 62: can_tx_payload[12] = 0;
  2209  000D48  0E00               	movlw	0
  2210  000D4A  0100               	movlb	0	; () banked
  2211  000D4C  6F6C               	movwf	(_can_tx_payload+12)& (0+255),b
  2212                           
  2213                           ; BSR set to: 0
  2214  000D4E  0012               	return		;funcret
  2215  000D50                     __end_of_construct_payload:
  2216                           	opt stack 0
  2217                           tblptru	equ	0xFF8
  2218                           tblptrh	equ	0xFF7
  2219                           tblptrl	equ	0xFF6
  2220                           tablat	equ	0xFF5
  2221                           prodh	equ	0xFF4
  2222                           prodl	equ	0xFF3
  2223                           postinc0	equ	0xFEE
  2224                           wreg	equ	0xFE8
  2225                           indf2	equ	0xFDF
  2226                           plusw2	equ	0xFDB
  2227                           fsr2h	equ	0xFDA
  2228                           fsr2l	equ	0xFD9
  2229                           status	equ	0xFD8
  2230                           
  2231 ;; *************** function _convert_to_short *****************
  2232 ;; Defined at:
  2233 ;;		line 16 in file "main.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;  data            2   21[COMRAM] PTR unsigned char 
  2236 ;;		 -> node_config@count(4), node_id(4), 
  2237 ;; Auto vars:     Size  Location     Type
  2238 ;;  i               2   26[COMRAM] int 
  2239 ;;  num             2   24[COMRAM] unsigned short 
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  2   21[COMRAM] unsigned short 
  2242 ;; Registers used:
  2243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2249 ;;      Params:         2       0       0       0       0       0       0
  2250 ;;      Locals:         4       0       0       0       0       0       0
  2251 ;;      Temps:          1       0       0       0       0       0       0
  2252 ;;      Totals:         7       0       0       0       0       0       0
  2253 ;;Total ram usage:        7 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:    2
  2256 ;; This function calls:
  2257 ;;		___wmul
  2258 ;; This function is called by:
  2259 ;;		_construct_payload
  2260 ;;		_node_config
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           	psect	text9
  2265  000DC6                     __ptext9:
  2266                           	opt stack 0
  2267  000DC6                     _convert_to_short:
  2268                           	opt stack 25
  2269                           
  2270                           ;main.c: 18: int i;
  2271                           ;main.c: 19: unsigned short num = 0;
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;incstack = 0
  2275  000DC6  0E00               	movlw	0
  2276  000DC8  6E40               	movwf	convert_to_short@num+1,c
  2277  000DCA  0E00               	movlw	0
  2278  000DCC  6E3F               	movwf	convert_to_short@num,c
  2279                           
  2280                           ;main.c: 20: for(i=0;i<4;i++)
  2281  000DCE  0E00               	movlw	0
  2282  000DD0  6E42               	movwf	convert_to_short@i+1,c
  2283  000DD2  0E00               	movlw	0
  2284  000DD4  6E41               	movwf	convert_to_short@i,c
  2285  000DD6  BE42               	btfsc	convert_to_short@i+1,7,c
  2286  000DD8  D006               	goto	l2091
  2287  000DDA  5042               	movf	convert_to_short@i+1,w,c
  2288  000DDC  E123               	bnz	l101
  2289  000DDE  0E04               	movlw	4
  2290  000DE0  5C41               	subwf	convert_to_short@i,w,c
  2291  000DE2  B0D8               	btfsc	status,0,c
  2292  000DE4  D01F               	goto	l101
  2293  000DE6                     l2091:
  2294                           
  2295                           ;main.c: 21: {
  2296                           ;main.c: 22: num = data[i] + num * 10;
  2297  000DE6  C03F  F036         	movff	convert_to_short@num,___wmul@multiplier
  2298  000DEA  C040  F037         	movff	convert_to_short@num+1,___wmul@multiplier+1
  2299  000DEE  0E00               	movlw	0
  2300  000DF0  6E39               	movwf	___wmul@multiplicand+1,c
  2301  000DF2  0E0A               	movlw	10
  2302  000DF4  6E38               	movwf	___wmul@multiplicand,c
  2303  000DF6  EC6D  F008         	call	___wmul	;wreg free
  2304  000DFA  5041               	movf	convert_to_short@i,w,c
  2305  000DFC  243C               	addwf	convert_to_short@data,w,c
  2306  000DFE  6ED9               	movwf	fsr2l,c
  2307  000E00  5042               	movf	convert_to_short@i+1,w,c
  2308  000E02  203D               	addwfc	convert_to_short@data+1,w,c
  2309  000E04  6EDA               	movwf	fsr2h,c
  2310  000E06  50DF               	movf	indf2,w,c
  2311  000E08  6E3E               	movwf	??_convert_to_short& (0+255),c
  2312  000E0A  503E               	movf	??_convert_to_short,w,c
  2313  000E0C  2436               	addwf	?___wmul,w,c
  2314  000E0E  6E3F               	movwf	convert_to_short@num,c
  2315  000E10  0E00               	movlw	0
  2316  000E12  2037               	addwfc	?___wmul+1,w,c
  2317  000E14  6E40               	movwf	convert_to_short@num+1,c
  2318  000E16  4A41               	infsnz	convert_to_short@i,f,c
  2319  000E18  2A42               	incf	convert_to_short@i+1,f,c
  2320  000E1A  BE42               	btfsc	convert_to_short@i+1,7,c
  2321  000E1C  D7E4               	goto	l2091
  2322  000E1E  5042               	movf	convert_to_short@i+1,w,c
  2323  000E20  E101               	bnz	u1340
  2324  000E22  D7DD               	goto	L3
  2325  000E24                     u1340:
  2326  000E24                     l101:
  2327                           
  2328                           ;main.c: 23: }
  2329                           ;main.c: 24: return num; ;
  2330  000E24  C03F  F03C         	movff	convert_to_short@num,?_convert_to_short
  2331  000E28  C040  F03D         	movff	convert_to_short@num+1,?_convert_to_short+1
  2332  000E2C  0012               	return		;funcret
  2333  000E2E                     __end_of_convert_to_short:
  2334                           	opt stack 0
  2335                           tblptru	equ	0xFF8
  2336                           tblptrh	equ	0xFF7
  2337                           tblptrl	equ	0xFF6
  2338                           tablat	equ	0xFF5
  2339                           prodh	equ	0xFF4
  2340                           prodl	equ	0xFF3
  2341                           postinc0	equ	0xFEE
  2342                           wreg	equ	0xFE8
  2343                           indf2	equ	0xFDF
  2344                           plusw2	equ	0xFDB
  2345                           fsr2h	equ	0xFDA
  2346                           fsr2l	equ	0xFD9
  2347                           status	equ	0xFD8
  2348                           
  2349 ;; *************** function ___wmul *****************
  2350 ;; Defined at:
  2351 ;;		line 15 in file "/opt/microchip/xc8/v1.36/sources/common/Umul16.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;  multiplier      2   15[COMRAM] unsigned int 
  2354 ;;  multiplicand    2   17[COMRAM] unsigned int 
  2355 ;; Auto vars:     Size  Location     Type
  2356 ;;  product         2   19[COMRAM] unsigned int 
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  2   15[COMRAM] unsigned int 
  2359 ;; Registers used:
  2360 ;;		wreg, status,2, status,0, prodl, prodh
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2366 ;;      Params:         4       0       0       0       0       0       0
  2367 ;;      Locals:         2       0       0       0       0       0       0
  2368 ;;      Temps:          0       0       0       0       0       0       0
  2369 ;;      Totals:         6       0       0       0       0       0       0
  2370 ;;Total ram usage:        6 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; Hardware stack levels required when called:    1
  2373 ;; This function calls:
  2374 ;;		Nothing
  2375 ;; This function is called by:
  2376 ;;		_convert_to_short
  2377 ;; This function uses a non-reentrant model
  2378 ;;
  2379                           
  2380                           	psect	text10
  2381  0010DA                     __ptext10:
  2382                           	opt stack 0
  2383  0010DA                     ___wmul:
  2384                           	opt stack 25
  2385                           
  2386                           ;incstack = 0
  2387  0010DA  5036               	movf	___wmul@multiplier,w,c
  2388  0010DC  0238               	mulwf	___wmul@multiplicand,c
  2389  0010DE  CFF3 F03A          	movff	prodl,___wmul@product
  2390  0010E2  CFF4 F03B          	movff	prodh,___wmul@product+1
  2391  0010E6  5036               	movf	___wmul@multiplier,w,c
  2392  0010E8  0239               	mulwf	___wmul@multiplicand+1,c
  2393  0010EA  50F3               	movf	prodl,w,c
  2394  0010EC  263B               	addwf	___wmul@product+1,f,c
  2395  0010EE  5037               	movf	___wmul@multiplier+1,w,c
  2396  0010F0  0238               	mulwf	___wmul@multiplicand,c
  2397  0010F2  50F3               	movf	prodl,w,c
  2398  0010F4  263B               	addwf	___wmul@product+1,f,c
  2399  0010F6  C03A  F036         	movff	___wmul@product,?___wmul
  2400  0010FA  C03B  F037         	movff	___wmul@product+1,?___wmul+1
  2401  0010FE  0012               	return	
  2402  001100                     __end_of___wmul:
  2403                           	opt stack 0
  2404                           tblptru	equ	0xFF8
  2405                           tblptrh	equ	0xFF7
  2406                           tblptrl	equ	0xFF6
  2407                           tablat	equ	0xFF5
  2408                           prodh	equ	0xFF4
  2409                           prodl	equ	0xFF3
  2410                           postinc0	equ	0xFEE
  2411                           wreg	equ	0xFE8
  2412                           indf2	equ	0xFDF
  2413                           plusw2	equ	0xFDB
  2414                           fsr2h	equ	0xFDA
  2415                           fsr2l	equ	0xFD9
  2416                           status	equ	0xFD8
  2417                           
  2418 ;; *************** function _can_transmit *****************
  2419 ;; Defined at:
  2420 ;;		line 82 in file "can.c"
  2421 ;; Parameters:    Size  Location     Type
  2422 ;;  can_tx_paylo    2   15[COMRAM] PTR const unsigned char 
  2423 ;;		 -> can_tx_payload(13), 
  2424 ;; Auto vars:     Size  Location     Type
  2425 ;;		None
  2426 ;; Return value:  Size  Location     Type
  2427 ;;                  1    wreg      void 
  2428 ;; Registers used:
  2429 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2430 ;; Tracked objects:
  2431 ;;		On entry : 0/0
  2432 ;;		On exit  : 0/0
  2433 ;;		Unchanged: 0/0
  2434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2435 ;;      Params:         2       0       0       0       0       0       0
  2436 ;;      Locals:         0       0       0       0       0       0       0
  2437 ;;      Temps:          0       0       0       0       0       0       0
  2438 ;;      Totals:         2       0       0       0       0       0       0
  2439 ;;Total ram usage:        2 bytes
  2440 ;; Hardware stack levels used:    1
  2441 ;; Hardware stack levels required when called:    1
  2442 ;; This function calls:
  2443 ;;		Nothing
  2444 ;; This function is called by:
  2445 ;;		_node_operation
  2446 ;;		_node_config
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           	psect	text11
  2451  000A90                     __ptext11:
  2452                           	opt stack 0
  2453  000A90                     _can_transmit:
  2454                           	opt stack 27
  2455                           
  2456                           ;can.c: 84: TXB0EIDH = can_tx_payload[0];
  2457                           
  2458                           ;incstack = 0
  2459  000A90  C036  FFD9         	movff	can_transmit@can_tx_payload,fsr2l
  2460  000A94  C037  FFDA         	movff	can_transmit@can_tx_payload+1,fsr2h
  2461  000A98  50DF               	movf	indf2,w,c
  2462  000A9A  010F               	movlb	15	; () banked
  2463  000A9C  6F43               	movwf	67,b	;volatile
  2464                           
  2465                           ; BSR set to: 15
  2466                           ;can.c: 85: TXB0EIDL = can_tx_payload[1];
  2467  000A9E  EE20 F001          	lfsr	2,1
  2468  000AA2  5036               	movf	can_transmit@can_tx_payload,w,c
  2469  000AA4  26D9               	addwf	fsr2l,f,c
  2470  000AA6  5037               	movf	can_transmit@can_tx_payload+1,w,c
  2471  000AA8  22DA               	addwfc	fsr2h,f,c
  2472  000AAA  50DF               	movf	indf2,w,c
  2473  000AAC  010F               	movlb	15	; () banked
  2474  000AAE  6F44               	movwf	68,b	;volatile
  2475                           
  2476                           ; BSR set to: 15
  2477                           ;can.c: 86: TXB0SIDH = can_tx_payload[2];
  2478  000AB0  EE20 F002          	lfsr	2,2
  2479  000AB4  5036               	movf	can_transmit@can_tx_payload,w,c
  2480  000AB6  26D9               	addwf	fsr2l,f,c
  2481  000AB8  5037               	movf	can_transmit@can_tx_payload+1,w,c
  2482  000ABA  22DA               	addwfc	fsr2h,f,c
  2483  000ABC  50DF               	movf	indf2,w,c
  2484  000ABE  010F               	movlb	15	; () banked
  2485  000AC0  6F41               	movwf	65,b	;volatile
  2486                           
  2487                           ; BSR set to: 15
  2488                           ;can.c: 87: TXB0SIDL = can_tx_payload[3];
  2489  000AC2  EE20 F003          	lfsr	2,3
  2490  000AC6  5036               	movf	can_transmit@can_tx_payload,w,c
  2491  000AC8  26D9               	addwf	fsr2l,f,c
  2492  000ACA  5037               	movf	can_transmit@can_tx_payload+1,w,c
  2493  000ACC  22DA               	addwfc	fsr2h,f,c
  2494  000ACE  50DF               	movf	indf2,w,c
  2495  000AD0  010F               	movlb	15	; () banked
  2496  000AD2  6F42               	movwf	66,b	;volatile
  2497                           
  2498                           ; BSR set to: 15
  2499                           ;can.c: 88: TXB0DLC = can_tx_payload[4];
  2500  000AD4  EE20 F004          	lfsr	2,4
  2501  000AD8  5036               	movf	can_transmit@can_tx_payload,w,c
  2502  000ADA  26D9               	addwf	fsr2l,f,c
  2503  000ADC  5037               	movf	can_transmit@can_tx_payload+1,w,c
  2504  000ADE  22DA               	addwfc	fsr2h,f,c
  2505  000AE0  50DF               	movf	indf2,w,c
  2506  000AE2  010F               	movlb	15	; () banked
  2507  000AE4  6F45               	movwf	69,b	;volatile
  2508                           
  2509                           ; BSR set to: 15
  2510                           ;can.c: 89: TXB0D0 = can_tx_payload[5];
  2511  000AE6  EE20 F005          	lfsr	2,5
  2512  000AEA  5036               	movf	can_transmit@can_tx_payload,w,c
  2513  000AEC  26D9               	addwf	fsr2l,f,c
  2514  000AEE  5037               	movf	can_transmit@can_tx_payload+1,w,c
  2515  000AF0  22DA               	addwfc	fsr2h,f,c
  2516  000AF2  50DF               	movf	indf2,w,c
  2517  000AF4  010F               	movlb	15	; () banked
  2518  000AF6  6F46               	movwf	70,b	;volatile
  2519                           
  2520                           ; BSR set to: 15
  2521                           ;can.c: 90: TXB0D1 = can_tx_payload[6];
  2522  000AF8  EE20 F006          	lfsr	2,6
  2523  000AFC  5036               	movf	can_transmit@can_tx_payload,w,c
  2524  000AFE  26D9               	addwf	fsr2l,f,c
  2525  000B00  5037               	movf	can_transmit@can_tx_payload+1,w,c
  2526  000B02  22DA               	addwfc	fsr2h,f,c
  2527  000B04  50DF               	movf	indf2,w,c
  2528  000B06  010F               	movlb	15	; () banked
  2529  000B08  6F47               	movwf	71,b	;volatile
  2530                           
  2531                           ; BSR set to: 15
  2532                           ;can.c: 91: TXB0D2 = can_tx_payload[7];
  2533  000B0A  EE20 F007          	lfsr	2,7
  2534  000B0E  5036               	movf	can_transmit@can_tx_payload,w,c
  2535  000B10  26D9               	addwf	fsr2l,f,c
  2536  000B12  5037               	movf	can_transmit@can_tx_payload+1,w,c
  2537  000B14  22DA               	addwfc	fsr2h,f,c
  2538  000B16  50DF               	movf	indf2,w,c
  2539  000B18  010F               	movlb	15	; () banked
  2540  000B1A  6F48               	movwf	72,b	;volatile
  2541                           
  2542                           ; BSR set to: 15
  2543                           ;can.c: 92: TXB0D3 = can_tx_payload[8];
  2544  000B1C  EE20 F008          	lfsr	2,8
  2545  000B20  5036               	movf	can_transmit@can_tx_payload,w,c
  2546  000B22  26D9               	addwf	fsr2l,f,c
  2547  000B24  5037               	movf	can_transmit@can_tx_payload+1,w,c
  2548  000B26  22DA               	addwfc	fsr2h,f,c
  2549  000B28  50DF               	movf	indf2,w,c
  2550  000B2A  010F               	movlb	15	; () banked
  2551  000B2C  6F49               	movwf	73,b	;volatile
  2552                           
  2553                           ; BSR set to: 15
  2554                           ;can.c: 93: TXB0D4 = can_tx_payload[9];
  2555  000B2E  EE20 F009          	lfsr	2,9
  2556  000B32  5036               	movf	can_transmit@can_tx_payload,w,c
  2557  000B34  26D9               	addwf	fsr2l,f,c
  2558  000B36  5037               	movf	can_transmit@can_tx_payload+1,w,c
  2559  000B38  22DA               	addwfc	fsr2h,f,c
  2560  000B3A  50DF               	movf	indf2,w,c
  2561  000B3C  010F               	movlb	15	; () banked
  2562  000B3E  6F4A               	movwf	74,b	;volatile
  2563                           
  2564                           ; BSR set to: 15
  2565                           ;can.c: 94: TXB0D5 = can_tx_payload[10];
  2566  000B40  EE20 F00A          	lfsr	2,10
  2567  000B44  5036               	movf	can_transmit@can_tx_payload,w,c
  2568  000B46  26D9               	addwf	fsr2l,f,c
  2569  000B48  5037               	movf	can_transmit@can_tx_payload+1,w,c
  2570  000B4A  22DA               	addwfc	fsr2h,f,c
  2571  000B4C  50DF               	movf	indf2,w,c
  2572  000B4E  010F               	movlb	15	; () banked
  2573  000B50  6F4B               	movwf	75,b	;volatile
  2574                           
  2575                           ; BSR set to: 15
  2576                           ;can.c: 95: TXB0D6 = can_tx_payload[11];
  2577  000B52  EE20 F00B          	lfsr	2,11
  2578  000B56  5036               	movf	can_transmit@can_tx_payload,w,c
  2579  000B58  26D9               	addwf	fsr2l,f,c
  2580  000B5A  5037               	movf	can_transmit@can_tx_payload+1,w,c
  2581  000B5C  22DA               	addwfc	fsr2h,f,c
  2582  000B5E  50DF               	movf	indf2,w,c
  2583  000B60  010F               	movlb	15	; () banked
  2584  000B62  6F4C               	movwf	76,b	;volatile
  2585                           
  2586                           ; BSR set to: 15
  2587                           ;can.c: 96: TXB0D7 = can_tx_payload[12];
  2588  000B64  EE20 F00C          	lfsr	2,12
  2589  000B68  5036               	movf	can_transmit@can_tx_payload,w,c
  2590  000B6A  26D9               	addwf	fsr2l,f,c
  2591  000B6C  5037               	movf	can_transmit@can_tx_payload+1,w,c
  2592  000B6E  22DA               	addwfc	fsr2h,f,c
  2593  000B70  50DF               	movf	indf2,w,c
  2594  000B72  010F               	movlb	15	; () banked
  2595  000B74  6F4D               	movwf	77,b	;volatile
  2596                           
  2597                           ; BSR set to: 15
  2598                           ;can.c: 98: TXB0REQ = 1;
  2599  000B76  010F               	movlb	15	; () banked
  2600  000B78  8740               	bsf	64,3,b	;volatile
  2601                           
  2602                           ; BSR set to: 15
  2603  000B7A  0012               	return		;funcret
  2604  000B7C                     __end_of_can_transmit:
  2605                           	opt stack 0
  2606                           tblptru	equ	0xFF8
  2607                           tblptrh	equ	0xFF7
  2608                           tblptrl	equ	0xFF6
  2609                           tablat	equ	0xFF5
  2610                           prodh	equ	0xFF4
  2611                           prodl	equ	0xFF3
  2612                           postinc0	equ	0xFEE
  2613                           wreg	equ	0xFE8
  2614                           indf2	equ	0xFDF
  2615                           plusw2	equ	0xFDB
  2616                           fsr2h	equ	0xFDA
  2617                           fsr2l	equ	0xFD9
  2618                           status	equ	0xFD8
  2619                           
  2620 ;; *************** function _mode_selection *****************
  2621 ;; Defined at:
  2622 ;;		line 280 in file "main.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;  mode            2   15[COMRAM] unsigned short 
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;		None
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  2   15[COMRAM] unsigned short 
  2629 ;; Registers used:
  2630 ;;		wreg, status,2, status,0
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2636 ;;      Params:         2       0       0       0       0       0       0
  2637 ;;      Locals:         0       0       0       0       0       0       0
  2638 ;;      Temps:          0       0       0       0       0       0       0
  2639 ;;      Totals:         2       0       0       0       0       0       0
  2640 ;;Total ram usage:        2 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    1
  2643 ;; This function calls:
  2644 ;;		Nothing
  2645 ;; This function is called by:
  2646 ;;		_pick_to_light
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           	psect	text12
  2651  0010B0                     __ptext12:
  2652                           	opt stack 0
  2653  0010B0                     _mode_selection:
  2654                           	opt stack 28
  2655                           
  2656                           ;main.c: 282: static bit once;
  2657                           ;main.c: 284: if (PORTBbits.RB0 && once)
  2658                           
  2659                           ; BSR set to: 15
  2660                           ;incstack = 0
  2661  0010B0  B081               	btfsc	3969,0,c	;volatile
  2662  0010B2  A24D               	btfss	mode_selection@once/(0+8),mode_selection@once& (0+7),c
  2663  0010B4  D00B               	goto	l177
  2664                           
  2665                           ;main.c: 285: {
  2666                           ;main.c: 286: once = 0;
  2667  0010B6  924D               	bcf	mode_selection@once/(0+8),mode_selection@once& (0+7),c
  2668                           
  2669                           ;main.c: 287: mode = !mode;
  2670  0010B8  5036               	movf	mode_selection@mode,w,c
  2671  0010BA  1037               	iorwf	mode_selection@mode+1,w,c
  2672  0010BC  A4D8               	btfss	status,2,c
  2673  0010BE  D002               	goto	u1210
  2674  0010C0  0E01               	movlw	1
  2675  0010C2  D001               	goto	u1220
  2676  0010C4                     u1210:
  2677  0010C4  0E00               	movlw	0
  2678  0010C6                     u1220:
  2679  0010C6  6E36               	movwf	mode_selection@mode,c
  2680  0010C8  6A37               	clrf	mode_selection@mode+1,c
  2681                           
  2682                           ;main.c: 288: }
  2683  0010CA  D002               	goto	l178
  2684  0010CC                     l177:
  2685                           
  2686                           ;main.c: 289: else if (!PORTBbits.RB0)
  2687  0010CC  A081               	btfss	3969,0,c	;volatile
  2688                           
  2689                           ;main.c: 290: {
  2690                           ;main.c: 291: once = 1;
  2691  0010CE  824D               	bsf	mode_selection@once/(0+8),mode_selection@once& (0+7),c
  2692  0010D0                     l178:
  2693                           
  2694                           ;main.c: 292: }
  2695                           ;main.c: 294: return mode;
  2696  0010D0  C036  F036         	movff	mode_selection@mode,?_mode_selection
  2697  0010D4  C037  F037         	movff	mode_selection@mode+1,?_mode_selection+1
  2698  0010D8  0012               	return		;funcret
  2699  0010DA                     __end_of_mode_selection:
  2700                           	opt stack 0
  2701                           tblptru	equ	0xFF8
  2702                           tblptrh	equ	0xFF7
  2703                           tblptrl	equ	0xFF6
  2704                           tablat	equ	0xFF5
  2705                           prodh	equ	0xFF4
  2706                           prodl	equ	0xFF3
  2707                           postinc0	equ	0xFEE
  2708                           wreg	equ	0xFE8
  2709                           indf2	equ	0xFDF
  2710                           plusw2	equ	0xFDB
  2711                           fsr2h	equ	0xFDA
  2712                           fsr2l	equ	0xFD9
  2713                           status	equ	0xFD8
  2714                           
  2715 ;; *************** function _display *****************
  2716 ;; Defined at:
  2717 ;;		line 16 in file "ssd_display.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;  data            2   15[COMRAM] PTR unsigned char 
  2720 ;;		 -> ssd(4), 
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;  wait            2   20[COMRAM] volatile unsigned int 
  2723 ;;  digit           1   19[COMRAM] unsigned char 
  2724 ;;  data_bit        1    0        unsigned char 
  2725 ;; Return value:  Size  Location     Type
  2726 ;;                  1    wreg      void 
  2727 ;; Registers used:
  2728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2729 ;; Tracked objects:
  2730 ;;		On entry : 0/0
  2731 ;;		On exit  : 0/0
  2732 ;;		Unchanged: 0/0
  2733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2734 ;;      Params:         2       0       0       0       0       0       0
  2735 ;;      Locals:         3       0       0       0       0       0       0
  2736 ;;      Temps:          2       0       0       0       0       0       0
  2737 ;;      Totals:         7       0       0       0       0       0       0
  2738 ;;Total ram usage:        7 bytes
  2739 ;; Hardware stack levels used:    1
  2740 ;; Hardware stack levels required when called:    1
  2741 ;; This function calls:
  2742 ;;		Nothing
  2743 ;; This function is called by:
  2744 ;;		_pick_to_light
  2745 ;; This function uses a non-reentrant model
  2746 ;;
  2747                           
  2748                           	psect	text13
  2749  000D50                     __ptext13:
  2750                           	opt stack 0
  2751  000D50                     _display:
  2752                           	opt stack 28
  2753                           
  2754                           ;ssd_display.c: 18: volatile unsigned int wait;
  2755                           ;ssd_display.c: 19: unsigned char data_bit;
  2756                           ;ssd_display.c: 20: unsigned char digit;
  2757                           ;ssd_display.c: 23: for (digit = 0; digit < 4; digit++)
  2758                           
  2759                           ;incstack = 0
  2760  000D50  0E00               	movlw	0
  2761  000D52  6E3A               	movwf	display@digit,c
  2762  000D54                     l1975:
  2763  000D54  0E03               	movlw	3
  2764  000D56  643A               	cpfsgt	display@digit,c
  2765  000D58  D001               	goto	l1979
  2766  000D5A  0012               	return	
  2767  000D5C                     l1979:
  2768                           
  2769                           ;ssd_display.c: 24: {
  2770                           ;ssd_display.c: 25: PORTD = data[digit];
  2771  000D5C  503A               	movf	display@digit,w,c
  2772  000D5E  0D01               	mullw	1
  2773  000D60  50F3               	movf	prodl,w,c
  2774  000D62  2436               	addwf	display@data,w,c
  2775  000D64  6ED9               	movwf	fsr2l,c
  2776  000D66  50F4               	movf	prodh,w,c
  2777  000D68  2037               	addwfc	display@data+1,w,c
  2778  000D6A  6EDA               	movwf	fsr2h,c
  2779  000D6C  50DF               	movf	indf2,w,c
  2780  000D6E  6E83               	movwf	3971,c	;volatile
  2781                           
  2782                           ;ssd_display.c: 27: PORTA = (PORTA & 0xF0) | (0x01 << digit);
  2783  000D70  C03A  F038         	movff	display@digit,??_display
  2784  000D74  0E01               	movlw	1
  2785  000D76  6E39               	movwf	(??_display+1)& (0+255),c
  2786  000D78  2A38               	incf	??_display,f,c
  2787  000D7A  D002               	goto	u1254
  2788  000D7C                     u1255:
  2789  000D7C  90D8               	bcf	status,0,c
  2790  000D7E  3639               	rlcf	??_display+1,f,c
  2791  000D80                     u1254:
  2792  000D80  2E38               	decfsz	??_display,f,c
  2793  000D82  D7FC               	goto	u1255
  2794  000D84  5080               	movf	3968,w,c	;volatile
  2795  000D86  0BF0               	andlw	240
  2796  000D88  1039               	iorwf	??_display+1,w,c
  2797  000D8A  6E80               	movwf	3968,c	;volatile
  2798                           
  2799                           ;ssd_display.c: 28: for (wait = 2500; wait--; );
  2800  000D8C  0E09               	movlw	9
  2801  000D8E  6E3C               	movwf	display@wait+1,c	;volatile
  2802  000D90  0EC4               	movlw	196
  2803  000D92  6E3B               	movwf	display@wait,c	;volatile
  2804  000D94                     l1985:
  2805  000D94  063B               	decf	display@wait,f,c	;volatile
  2806  000D96  A0D8               	btfss	status,0,c
  2807  000D98  063C               	decf	display@wait+1,f,c	;volatile
  2808  000D9A  283B               	incf	display@wait,w,c	;volatile
  2809  000D9C  E1FB               	bnz	l1985
  2810  000D9E  283C               	incf	display@wait+1,w,c	;volatile
  2811  000DA0  A4D8               	btfss	status,2,c
  2812  000DA2  D7F8               	goto	l1985
  2813                           
  2814                           ;ssd_display.c: 30: PORTA = (PORTA & 0xF0);
  2815  000DA4  5080               	movf	3968,w,c	;volatile
  2816  000DA6  0BF0               	andlw	240
  2817  000DA8  6E80               	movwf	3968,c	;volatile
  2818                           
  2819                           ;ssd_display.c: 31: for (wait = 250; wait--; );
  2820  000DAA  0E00               	movlw	0
  2821  000DAC  6E3C               	movwf	display@wait+1,c	;volatile
  2822  000DAE  0EFA               	movlw	250
  2823  000DB0  6E3B               	movwf	display@wait,c	;volatile
  2824  000DB2                     l1991:
  2825  000DB2  063B               	decf	display@wait,f,c	;volatile
  2826  000DB4  A0D8               	btfss	status,0,c
  2827  000DB6  063C               	decf	display@wait+1,f,c	;volatile
  2828  000DB8  283B               	incf	display@wait,w,c	;volatile
  2829  000DBA  E1FB               	bnz	l1991
  2830  000DBC  283C               	incf	display@wait+1,w,c	;volatile
  2831  000DBE  A4D8               	btfss	status,2,c
  2832  000DC0  D7F8               	goto	l1991
  2833  000DC2  2A3A               	incf	display@digit,f,c
  2834  000DC4  D7C7               	goto	l1975
  2835  000DC6                     __end_of_display:
  2836                           	opt stack 0
  2837                           tblptru	equ	0xFF8
  2838                           tblptrh	equ	0xFF7
  2839                           tblptrl	equ	0xFF6
  2840                           tablat	equ	0xFF5
  2841                           prodh	equ	0xFF4
  2842                           prodl	equ	0xFF3
  2843                           postinc0	equ	0xFEE
  2844                           wreg	equ	0xFE8
  2845                           indf2	equ	0xFDF
  2846                           plusw2	equ	0xFDB
  2847                           fsr2h	equ	0xFDA
  2848                           fsr2l	equ	0xFD9
  2849                           status	equ	0xFD8
  2850                           
  2851 ;; *************** function _init_config *****************
  2852 ;; Defined at:
  2853 ;;		line 321 in file "main.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;		None
  2856 ;; Auto vars:     Size  Location     Type
  2857 ;;  temp            2   34[COMRAM] unsigned short 
  2858 ;; Return value:  Size  Location     Type
  2859 ;;                  1    wreg      void 
  2860 ;; Registers used:
  2861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2862 ;; Tracked objects:
  2863 ;;		On entry : 0/0
  2864 ;;		On exit  : 0/0
  2865 ;;		Unchanged: 0/0
  2866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2867 ;;      Params:         0       0       0       0       0       0       0
  2868 ;;      Locals:         2       0       0       0       0       0       0
  2869 ;;      Temps:          4       0       0       0       0       0       0
  2870 ;;      Totals:         6       0       0       0       0       0       0
  2871 ;;Total ram usage:        6 bytes
  2872 ;; Hardware stack levels used:    1
  2873 ;; Hardware stack levels required when called:    5
  2874 ;; This function calls:
  2875 ;;		_convert_to_byte
  2876 ;;		_eeprom_at24c04_random_read
  2877 ;;		_init_can
  2878 ;;		_init_digital_keypad
  2879 ;;		_init_i2c
  2880 ;;		_init_ssd_control
  2881 ;; This function is called by:
  2882 ;;		_main
  2883 ;; This function uses a non-reentrant model
  2884 ;;
  2885                           
  2886                           	psect	text14
  2887  000C40                     __ptext14:
  2888                           	opt stack 0
  2889  000C40                     _init_config:
  2890                           	opt stack 25
  2891                           
  2892                           ;main.c: 324: init_ssd_control();
  2893                           
  2894                           ;incstack = 0
  2895  000C40  ECA9  F008         	call	_init_ssd_control	;wreg free
  2896                           
  2897                           ;main.c: 325: init_digital_keypad();
  2898  000C44  ECC3  F008         	call	_init_digital_keypad	;wreg free
  2899                           
  2900                           ;main.c: 326: init_can();
  2901  000C48  ECBF  F007         	call	_init_can	;wreg free
  2902                           
  2903                           ;main.c: 327: init_i2c();
  2904  000C4C  EC9E  F008         	call	_init_i2c	;wreg free
  2905                           
  2906                           ;main.c: 329: TRISE0 = 0;
  2907  000C50  9096               	bcf	3990,0,c	;volatile
  2908                           
  2909                           ;main.c: 330: PORTEbits.RE0 = 0;
  2910  000C52  9084               	bcf	3972,0,c	;volatile
  2911                           
  2912                           ;main.c: 333: TRISB7 = 0;
  2913  000C54  9E93               	bcf	3987,7,c	;volatile
  2914                           
  2915                           ;main.c: 334: PORTBbits.RB7 = 0;
  2916  000C56  9E81               	bcf	3969,7,c	;volatile
  2917                           
  2918                           ;main.c: 336: unsigned short temp = (eeprom_at24c04_random_read(0x01) << 8) | eeprom_at2
      +                          4c04_random_read(0x00);
  2919  000C58  0E01               	movlw	1
  2920  000C5A  EC41  F008         	call	_eeprom_at24c04_random_read
  2921  000C5E  6E45               	movwf	??_init_config& (0+255),c
  2922  000C60  5045               	movf	??_init_config,w,c
  2923  000C62  6E47               	movwf	(??_init_config+2)& (0+255),c
  2924  000C64  6A46               	clrf	(??_init_config+1)& (0+255),c
  2925  000C66  0E00               	movlw	0
  2926  000C68  EC41  F008         	call	_eeprom_at24c04_random_read
  2927  000C6C  6E48               	movwf	(??_init_config+3)& (0+255),c
  2928  000C6E  5048               	movf	??_init_config+3,w,c
  2929  000C70  1046               	iorwf	??_init_config+1,w,c
  2930  000C72  6E49               	movwf	init_config@temp,c
  2931  000C74  5047               	movf	??_init_config+2,w,c
  2932  000C76  6E4A               	movwf	init_config@temp+1,c
  2933                           
  2934                           ;main.c: 338: if (temp > 127)
  2935  000C78  504A               	movf	init_config@temp+1,w,c
  2936  000C7A  E104               	bnz	u1800
  2937  000C7C  0E80               	movlw	128
  2938  000C7E  5C49               	subwf	init_config@temp,w,c
  2939  000C80  A0D8               	btfss	status,0,c
  2940  000C82  D004               	goto	l2461
  2941  000C84                     u1800:
  2942                           
  2943                           ;main.c: 339: {
  2944                           ;main.c: 340: temp = 10;
  2945  000C84  0E00               	movlw	0
  2946  000C86  6E4A               	movwf	init_config@temp+1,c
  2947  000C88  0E0A               	movlw	10
  2948  000C8A  6E49               	movwf	init_config@temp,c
  2949  000C8C                     l2461:
  2950                           
  2951                           ;main.c: 341: }
  2952                           ;main.c: 343: convert_to_byte(node_id, temp);
  2953  000C8C  0E1B               	movlw	low _node_id
  2954  000C8E  6E3D               	movwf	convert_to_byte@data,c
  2955  000C90  0E00               	movlw	high _node_id
  2956  000C92  6E3E               	movwf	convert_to_byte@data+1,c
  2957  000C94  C049  F03F         	movff	init_config@temp,convert_to_byte@value
  2958  000C98  C04A  F040         	movff	init_config@temp+1,convert_to_byte@value+1
  2959  000C9C  EC17  F007         	call	_convert_to_byte	;wreg free
  2960                           
  2961                           ;main.c: 346: { CANCON &= 0x1F; CANCON |= e_can_op_mode_config; };
  2962  000CA0  0E1F               	movlw	31
  2963  000CA2  166F               	andwf	3951,f,c	;volatile
  2964  000CA4  8E6F               	bsf	3951,7,c	;volatile
  2965                           
  2966                           ;main.c: 348: temp = temp << 5;
  2967  000CA6  C049  F045         	movff	init_config@temp,??_init_config
  2968  000CAA  C04A  F046         	movff	init_config@temp+1,??_init_config+1
  2969  000CAE  0E05               	movlw	5
  2970  000CB0                     u1815:
  2971  000CB0  90D8               	bcf	status,0,c
  2972  000CB2  3645               	rlcf	??_init_config,f,c
  2973  000CB4  3646               	rlcf	??_init_config+1,f,c
  2974  000CB6  2EE8               	decfsz	wreg,f,c
  2975  000CB8  D7FB               	goto	u1815
  2976  000CBA  C045  F049         	movff	??_init_config,init_config@temp
  2977  000CBE  C046  F04A         	movff	??_init_config+1,init_config@temp+1
  2978                           
  2979                           ;main.c: 350: RXF0SIDH = (temp >> 8) & 0xFF;
  2980  000CC2  504A               	movf	init_config@temp+1,w,c
  2981  000CC4  010F               	movlb	15	; () banked
  2982  000CC6  6F00               	movwf	0,b	;volatile
  2983                           
  2984                           ; BSR set to: 15
  2985                           ;main.c: 351: RXF0SIDL = (temp >> 0) & 0xFF;
  2986  000CC8  C049  FF01         	movff	init_config@temp,3841	;volatile
  2987                           
  2988                           ; BSR set to: 15
  2989                           ;main.c: 354: { CANCON &= 0x1F; CANCON |= e_can_op_mode_normal; };
  2990  000CCC  0E1F               	movlw	31
  2991  000CCE  166F               	andwf	3951,f,c	;volatile
  2992                           
  2993                           ; BSR set to: 15
  2994  000CD0  506F               	movf	3951,w,c	;volatile
  2995                           
  2996                           ; BSR set to: 15
  2997                           ;main.c: 356: GIE = 1;
  2998  000CD2  8EF2               	bsf	intcon,7,c	;volatile
  2999                           
  3000                           ; BSR set to: 15
  3001  000CD4  0012               	return		;funcret
  3002  000CD6                     __end_of_init_config:
  3003                           	opt stack 0
  3004                           tblptru	equ	0xFF8
  3005                           tblptrh	equ	0xFF7
  3006                           tblptrl	equ	0xFF6
  3007                           tablat	equ	0xFF5
  3008                           prodh	equ	0xFF4
  3009                           prodl	equ	0xFF3
  3010                           intcon	equ	0xFF2
  3011                           postinc0	equ	0xFEE
  3012                           wreg	equ	0xFE8
  3013                           indf2	equ	0xFDF
  3014                           plusw2	equ	0xFDB
  3015                           fsr2h	equ	0xFDA
  3016                           fsr2l	equ	0xFD9
  3017                           status	equ	0xFD8
  3018                           
  3019 ;; *************** function _init_ssd_control *****************
  3020 ;; Defined at:
  3021 ;;		line 5 in file "ssd_display.c"
  3022 ;; Parameters:    Size  Location     Type
  3023 ;;		None
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;		None
  3026 ;; Return value:  Size  Location     Type
  3027 ;;                  1    wreg      void 
  3028 ;; Registers used:
  3029 ;;		wreg, status,2, status,0
  3030 ;; Tracked objects:
  3031 ;;		On entry : 0/0
  3032 ;;		On exit  : 0/0
  3033 ;;		Unchanged: 0/0
  3034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3035 ;;      Params:         0       0       0       0       0       0       0
  3036 ;;      Locals:         0       0       0       0       0       0       0
  3037 ;;      Temps:          0       0       0       0       0       0       0
  3038 ;;      Totals:         0       0       0       0       0       0       0
  3039 ;;Total ram usage:        0 bytes
  3040 ;; Hardware stack levels used:    1
  3041 ;; Hardware stack levels required when called:    1
  3042 ;; This function calls:
  3043 ;;		Nothing
  3044 ;; This function is called by:
  3045 ;;		_init_config
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           	psect	text15
  3050  001152                     __ptext15:
  3051                           	opt stack 0
  3052  001152                     _init_ssd_control:
  3053                           	opt stack 28
  3054                           
  3055                           ;ssd_display.c: 8: TRISD = 0x00;
  3056                           
  3057                           ; BSR set to: 15
  3058                           ;incstack = 0
  3059  001152  0E00               	movlw	0
  3060  001154  6E95               	movwf	3989,c	;volatile
  3061                           
  3062                           ;ssd_display.c: 10: TRISA = TRISA & 0xF0;
  3063  001156  5092               	movf	3986,w,c	;volatile
  3064  001158  0BF0               	andlw	240
  3065  00115A  6E92               	movwf	3986,c	;volatile
  3066                           
  3067                           ;ssd_display.c: 13: PORTA = PORTA & 0xF0;
  3068  00115C  5080               	movf	3968,w,c	;volatile
  3069  00115E  0BF0               	andlw	240
  3070  001160  6E80               	movwf	3968,c	;volatile
  3071  001162  0012               	return		;funcret
  3072  001164                     __end_of_init_ssd_control:
  3073                           	opt stack 0
  3074                           tblptru	equ	0xFF8
  3075                           tblptrh	equ	0xFF7
  3076                           tblptrl	equ	0xFF6
  3077                           tablat	equ	0xFF5
  3078                           prodh	equ	0xFF4
  3079                           prodl	equ	0xFF3
  3080                           intcon	equ	0xFF2
  3081                           postinc0	equ	0xFEE
  3082                           wreg	equ	0xFE8
  3083                           indf2	equ	0xFDF
  3084                           plusw2	equ	0xFDB
  3085                           fsr2h	equ	0xFDA
  3086                           fsr2l	equ	0xFD9
  3087                           status	equ	0xFD8
  3088                           
  3089 ;; *************** function _init_i2c *****************
  3090 ;; Defined at:
  3091 ;;		line 3 in file "i2c.c"
  3092 ;; Parameters:    Size  Location     Type
  3093 ;;		None
  3094 ;; Auto vars:     Size  Location     Type
  3095 ;;		None
  3096 ;; Return value:  Size  Location     Type
  3097 ;;                  1    wreg      void 
  3098 ;; Registers used:
  3099 ;;		wreg, status,2
  3100 ;; Tracked objects:
  3101 ;;		On entry : 0/0
  3102 ;;		On exit  : 0/0
  3103 ;;		Unchanged: 0/0
  3104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3105 ;;      Params:         0       0       0       0       0       0       0
  3106 ;;      Locals:         0       0       0       0       0       0       0
  3107 ;;      Temps:          0       0       0       0       0       0       0
  3108 ;;      Totals:         0       0       0       0       0       0       0
  3109 ;;Total ram usage:        0 bytes
  3110 ;; Hardware stack levels used:    1
  3111 ;; Hardware stack levels required when called:    1
  3112 ;; This function calls:
  3113 ;;		Nothing
  3114 ;; This function is called by:
  3115 ;;		_init_config
  3116 ;; This function uses a non-reentrant model
  3117 ;;
  3118                           
  3119                           	psect	text16
  3120  00113C                     __ptext16:
  3121                           	opt stack 0
  3122  00113C                     _init_i2c:
  3123                           	opt stack 28
  3124                           
  3125                           ;i2c.c: 6: TRISC3 = 1;
  3126                           
  3127                           ;incstack = 0
  3128  00113C  8694               	bsf	3988,3,c	;volatile
  3129                           
  3130                           ;i2c.c: 7: TRISC4 = 1;
  3131  00113E  8894               	bsf	3988,4,c	;volatile
  3132                           
  3133                           ;i2c.c: 9: SSPCON1 = 0x28;
  3134  001140  0E28               	movlw	40
  3135  001142  6EC6               	movwf	4038,c	;volatile
  3136                           
  3137                           ;i2c.c: 11: SSPADD = 0x30;
  3138  001144  0E30               	movlw	48
  3139  001146  6EC8               	movwf	4040,c	;volatile
  3140                           
  3141                           ;i2c.c: 13: CKE = 0;
  3142  001148  9CC7               	bcf	4039,6,c	;volatile
  3143                           
  3144                           ;i2c.c: 15: SMP = 1;
  3145  00114A  8EC7               	bsf	4039,7,c	;volatile
  3146                           
  3147                           ;i2c.c: 17: SSPIF = 0;
  3148  00114C  969E               	bcf	3998,3,c	;volatile
  3149                           
  3150                           ;i2c.c: 19: BCLIF = 0;
  3151  00114E  96A1               	bcf	4001,3,c	;volatile
  3152  001150  0012               	return		;funcret
  3153  001152                     __end_of_init_i2c:
  3154                           	opt stack 0
  3155                           tblptru	equ	0xFF8
  3156                           tblptrh	equ	0xFF7
  3157                           tblptrl	equ	0xFF6
  3158                           tablat	equ	0xFF5
  3159                           prodh	equ	0xFF4
  3160                           prodl	equ	0xFF3
  3161                           intcon	equ	0xFF2
  3162                           postinc0	equ	0xFEE
  3163                           wreg	equ	0xFE8
  3164                           indf2	equ	0xFDF
  3165                           plusw2	equ	0xFDB
  3166                           fsr2h	equ	0xFDA
  3167                           fsr2l	equ	0xFD9
  3168                           status	equ	0xFD8
  3169                           
  3170 ;; *************** function _init_digital_keypad *****************
  3171 ;; Defined at:
  3172 ;;		line 4 in file "digital_keypad.c"
  3173 ;; Parameters:    Size  Location     Type
  3174 ;;		None
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;		None
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  1    wreg      void 
  3179 ;; Registers used:
  3180 ;;		wreg, status,2, status,0
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3186 ;;      Params:         0       0       0       0       0       0       0
  3187 ;;      Locals:         0       0       0       0       0       0       0
  3188 ;;      Temps:          0       0       0       0       0       0       0
  3189 ;;      Totals:         0       0       0       0       0       0       0
  3190 ;;Total ram usage:        0 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:    1
  3193 ;; This function calls:
  3194 ;;		Nothing
  3195 ;; This function is called by:
  3196 ;;		_init_config
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           	psect	text17
  3201  001186                     __ptext17:
  3202                           	opt stack 0
  3203  001186                     _init_digital_keypad:
  3204                           	opt stack 28
  3205                           
  3206                           ;digital_keypad.c: 6: TRISC = TRISC | 0x07;
  3207                           
  3208                           ;incstack = 0
  3209  001186  5094               	movf	3988,w,c	;volatile
  3210  001188  0907               	iorlw	7
  3211  00118A  6E94               	movwf	3988,c	;volatile
  3212  00118C  0012               	return		;funcret
  3213  00118E                     __end_of_init_digital_keypad:
  3214                           	opt stack 0
  3215                           tblptru	equ	0xFF8
  3216                           tblptrh	equ	0xFF7
  3217                           tblptrl	equ	0xFF6
  3218                           tablat	equ	0xFF5
  3219                           prodh	equ	0xFF4
  3220                           prodl	equ	0xFF3
  3221                           intcon	equ	0xFF2
  3222                           postinc0	equ	0xFEE
  3223                           wreg	equ	0xFE8
  3224                           indf2	equ	0xFDF
  3225                           plusw2	equ	0xFDB
  3226                           fsr2h	equ	0xFDA
  3227                           fsr2l	equ	0xFD9
  3228                           status	equ	0xFD8
  3229                           
  3230 ;; *************** function _init_can *****************
  3231 ;; Defined at:
  3232 ;;		line 9 in file "can.c"
  3233 ;; Parameters:    Size  Location     Type
  3234 ;;		None
  3235 ;; Auto vars:     Size  Location     Type
  3236 ;;		None
  3237 ;; Return value:  Size  Location     Type
  3238 ;;                  1    wreg      void 
  3239 ;; Registers used:
  3240 ;;		wreg, status,2, status,0
  3241 ;; Tracked objects:
  3242 ;;		On entry : 0/0
  3243 ;;		On exit  : 0/0
  3244 ;;		Unchanged: 0/0
  3245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3246 ;;      Params:         0       0       0       0       0       0       0
  3247 ;;      Locals:         0       0       0       0       0       0       0
  3248 ;;      Temps:          0       0       0       0       0       0       0
  3249 ;;      Totals:         0       0       0       0       0       0       0
  3250 ;;Total ram usage:        0 bytes
  3251 ;; Hardware stack levels used:    1
  3252 ;; Hardware stack levels required when called:    1
  3253 ;; This function calls:
  3254 ;;		Nothing
  3255 ;; This function is called by:
  3256 ;;		_init_config
  3257 ;; This function uses a non-reentrant model
  3258 ;;
  3259                           
  3260                           	psect	text18
  3261  000F7E                     __ptext18:
  3262                           	opt stack 0
  3263  000F7E                     _init_can:
  3264                           	opt stack 28
  3265                           
  3266                           ;can.c: 12: TRISB2 = 0;
  3267                           
  3268                           ;incstack = 0
  3269  000F7E  9493               	bcf	3987,2,c	;volatile
  3270                           
  3271                           ;can.c: 13: TRISB3 = 1;
  3272  000F80  8693               	bsf	3987,3,c	;volatile
  3273                           
  3274                           ;can.c: 16: CANSTAT &= 0x1F;
  3275  000F82  0E1F               	movlw	31
  3276  000F84  166E               	andwf	3950,f,c	;volatile
  3277                           
  3278                           ;can.c: 17: CANSTAT |= 0x80;
  3279  000F86  8E6E               	bsf	3950,7,c	;volatile
  3280  000F88                     l1473:
  3281  000F88  0E80               	movlw	128
  3282  000F8A  186E               	xorwf	3950,w,c	;volatile
  3283  000F8C  A4D8               	btfss	status,2,c
  3284  000F8E  D7FC               	goto	l1473
  3285                           
  3286                           ;can.c: 23: ECANCON = 0x00;
  3287  000F90  0E00               	movlw	0
  3288  000F92  6E77               	movwf	3959,c	;volatile
  3289                           
  3290                           ;can.c: 26: BRGCON1 = 0xE1;
  3291  000F94  0EE1               	movlw	225
  3292  000F96  6E70               	movwf	3952,c	;volatile
  3293                           
  3294                           ;can.c: 27: BRGCON2 = 0x1B;
  3295  000F98  0E1B               	movlw	27
  3296  000F9A  6E71               	movwf	3953,c	;volatile
  3297                           
  3298                           ;can.c: 28: BRGCON3 = 0x03;
  3299  000F9C  0E03               	movlw	3
  3300  000F9E  6E72               	movwf	3954,c	;volatile
  3301                           
  3302                           ;can.c: 34: RXFCON0 = 0x01;
  3303  000FA0  0E01               	movlw	1
  3304  000FA2  010D               	movlb	13	; () banked
  3305  000FA4  6FD4               	movwf	212,b	;volatile
  3306                           
  3307                           ; BSR set to: 13
  3308                           ;can.c: 38: RXM0EIDH = 0xFF;
  3309  000FA6  010F               	movlb	15	; () banked
  3310  000FA8  691A               	setf	26,b	;volatile
  3311                           
  3312                           ; BSR set to: 15
  3313                           ;can.c: 39: RXM0EIDL = 0xFF;
  3314  000FAA  010F               	movlb	15	; () banked
  3315  000FAC  691B               	setf	27,b	;volatile
  3316                           
  3317                           ; BSR set to: 15
  3318                           ;can.c: 40: RXM0SIDH = 0xFF;
  3319  000FAE  010F               	movlb	15	; () banked
  3320  000FB0  6918               	setf	24,b	;volatile
  3321                           
  3322                           ; BSR set to: 15
  3323                           ;can.c: 41: RXM0SIDL = 0xFF;
  3324  000FB2  010F               	movlb	15	; () banked
  3325  000FB4  6919               	setf	25,b	;volatile
  3326                           
  3327                           ; BSR set to: 15
  3328                           ;can.c: 46: { CANCON &= 0x1F; CANCON |= e_can_op_mode_normal; };
  3329  000FB6  0E1F               	movlw	31
  3330  000FB8  166F               	andwf	3951,f,c	;volatile
  3331                           
  3332                           ; BSR set to: 15
  3333  000FBA  506F               	movf	3951,w,c	;volatile
  3334                           
  3335                           ; BSR set to: 15
  3336                           ;can.c: 49: RXB0CON = 0x00;
  3337  000FBC  0E00               	movlw	0
  3338  000FBE  6E60               	movwf	3936,c	;volatile
  3339                           
  3340                           ; BSR set to: 15
  3341  000FC0  0012               	return		;funcret
  3342  000FC2                     __end_of_init_can:
  3343                           	opt stack 0
  3344                           tblptru	equ	0xFF8
  3345                           tblptrh	equ	0xFF7
  3346                           tblptrl	equ	0xFF6
  3347                           tablat	equ	0xFF5
  3348                           prodh	equ	0xFF4
  3349                           prodl	equ	0xFF3
  3350                           intcon	equ	0xFF2
  3351                           postinc0	equ	0xFEE
  3352                           wreg	equ	0xFE8
  3353                           indf2	equ	0xFDF
  3354                           plusw2	equ	0xFDB
  3355                           fsr2h	equ	0xFDA
  3356                           fsr2l	equ	0xFD9
  3357                           status	equ	0xFD8
  3358                           
  3359 ;; *************** function _eeprom_at24c04_random_read *****************
  3360 ;; Defined at:
  3361 ;;		line 17 in file "at24c04.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  memory_loc      1    wreg     unsigned char 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  memory_loc      1   16[COMRAM] unsigned char 
  3366 ;;  received_dat    1   17[COMRAM] unsigned char 
  3367 ;; Return value:  Size  Location     Type
  3368 ;;                  1    wreg      unsigned char 
  3369 ;; Registers used:
  3370 ;;		wreg, status,2, cstack
  3371 ;; Tracked objects:
  3372 ;;		On entry : 0/0
  3373 ;;		On exit  : 0/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3376 ;;      Params:         0       0       0       0       0       0       0
  3377 ;;      Locals:         2       0       0       0       0       0       0
  3378 ;;      Temps:          0       0       0       0       0       0       0
  3379 ;;      Totals:         2       0       0       0       0       0       0
  3380 ;;Total ram usage:        2 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; Hardware stack levels required when called:    4
  3383 ;; This function calls:
  3384 ;;		_i2c_read
  3385 ;;		_i2c_rep_start
  3386 ;;		_i2c_start
  3387 ;;		_i2c_stop
  3388 ;;		_i2c_write
  3389 ;; This function is called by:
  3390 ;;		_init_config
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394                           	psect	text19
  3395  001082                     __ptext19:
  3396                           	opt stack 0
  3397  001082                     _eeprom_at24c04_random_read:
  3398                           	opt stack 25
  3399                           
  3400                           ; BSR set to: 15
  3401                           ;incstack = 0
  3402                           ;eeprom_at24c04_random_read@memory_loc stored from wreg
  3403  001082  6E37               	movwf	eeprom_at24c04_random_read@memory_loc,c
  3404                           
  3405                           ;at24c04.c: 19: unsigned char received_data = 0;
  3406  001084  0E00               	movlw	0
  3407  001086  6E38               	movwf	eeprom_at24c04_random_read@received_data,c
  3408                           
  3409                           ;at24c04.c: 21: i2c_start();
  3410  001088  ECCB  F008         	call	_i2c_start	;wreg free
  3411                           
  3412                           ;at24c04.c: 22: i2c_write(0xA0);
  3413  00108C  0EA0               	movlw	160
  3414  00108E  ECB2  F008         	call	_i2c_write
  3415                           
  3416                           ;at24c04.c: 23: i2c_write(memory_loc);
  3417  001092  5037               	movf	eeprom_at24c04_random_read@memory_loc,w,c
  3418  001094  ECB2  F008         	call	_i2c_write
  3419                           
  3420                           ;at24c04.c: 24: i2c_rep_start();
  3421  001098  ECCF  F008         	call	_i2c_rep_start	;wreg free
  3422                           
  3423                           ;at24c04.c: 25: i2c_write(0xA1);
  3424  00109C  0EA1               	movlw	161
  3425  00109E  ECB2  F008         	call	_i2c_write
  3426                           
  3427                           ;at24c04.c: 26: received_data = i2c_read();
  3428  0010A2  ECB8  F008         	call	_i2c_read	;wreg free
  3429  0010A6  6E38               	movwf	eeprom_at24c04_random_read@received_data,c
  3430                           
  3431                           ;at24c04.c: 27: i2c_stop();
  3432  0010A8  ECC7  F008         	call	_i2c_stop	;wreg free
  3433                           
  3434                           ;at24c04.c: 29: return received_data;
  3435  0010AC  5038               	movf	eeprom_at24c04_random_read@received_data,w,c
  3436  0010AE  0012               	return	
  3437  0010B0                     __end_of_eeprom_at24c04_random_read:
  3438                           	opt stack 0
  3439                           tblptru	equ	0xFF8
  3440                           tblptrh	equ	0xFF7
  3441                           tblptrl	equ	0xFF6
  3442                           tablat	equ	0xFF5
  3443                           prodh	equ	0xFF4
  3444                           prodl	equ	0xFF3
  3445                           intcon	equ	0xFF2
  3446                           postinc0	equ	0xFEE
  3447                           wreg	equ	0xFE8
  3448                           indf2	equ	0xFDF
  3449                           plusw2	equ	0xFDB
  3450                           fsr2h	equ	0xFDA
  3451                           fsr2l	equ	0xFD9
  3452                           status	equ	0xFD8
  3453                           
  3454 ;; *************** function _i2c_write *****************
  3455 ;; Defined at:
  3456 ;;		line 54 in file "i2c.c"
  3457 ;; Parameters:    Size  Location     Type
  3458 ;;  data            1    wreg     unsigned char 
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;  data            1   15[COMRAM] unsigned char 
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  1    wreg      void 
  3463 ;; Registers used:
  3464 ;;		wreg, cstack
  3465 ;; Tracked objects:
  3466 ;;		On entry : 0/0
  3467 ;;		On exit  : 0/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3470 ;;      Params:         0       0       0       0       0       0       0
  3471 ;;      Locals:         1       0       0       0       0       0       0
  3472 ;;      Temps:          0       0       0       0       0       0       0
  3473 ;;      Totals:         1       0       0       0       0       0       0
  3474 ;;Total ram usage:        1 bytes
  3475 ;; Hardware stack levels used:    1
  3476 ;; Hardware stack levels required when called:    2
  3477 ;; This function calls:
  3478 ;;		_i2c_idle
  3479 ;; This function is called by:
  3480 ;;		_eeprom_at24c04_random_read
  3481 ;;		_eeprom_at24c04_byte_write
  3482 ;;		_eeprom_at24c04_cur_addr_read
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           	psect	text20
  3487  001164                     __ptext20:
  3488                           	opt stack 0
  3489  001164                     _i2c_write:
  3490                           	opt stack 25
  3491                           
  3492                           ;incstack = 0
  3493                           ;i2c_write@data stored from wreg
  3494  001164  6E36               	movwf	i2c_write@data,c
  3495                           
  3496                           ;i2c.c: 56: SSPBUF = data;
  3497  001166  C036  FFC9         	movff	i2c_write@data,4041	;volatile
  3498                           
  3499                           ;i2c.c: 57: i2c_idle();
  3500  00116A  ECD7  F008         	call	_i2c_idle	;wreg free
  3501  00116E  0012               	return		;funcret
  3502  001170                     __end_of_i2c_write:
  3503                           	opt stack 0
  3504                           tblptru	equ	0xFF8
  3505                           tblptrh	equ	0xFF7
  3506                           tblptrl	equ	0xFF6
  3507                           tablat	equ	0xFF5
  3508                           prodh	equ	0xFF4
  3509                           prodl	equ	0xFF3
  3510                           intcon	equ	0xFF2
  3511                           postinc0	equ	0xFEE
  3512                           wreg	equ	0xFE8
  3513                           indf2	equ	0xFDF
  3514                           plusw2	equ	0xFDB
  3515                           fsr2h	equ	0xFDA
  3516                           fsr2l	equ	0xFD9
  3517                           status	equ	0xFD8
  3518                           
  3519 ;; *************** function _i2c_stop *****************
  3520 ;; Defined at:
  3521 ;;		line 42 in file "i2c.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;		None
  3524 ;; Auto vars:     Size  Location     Type
  3525 ;;		None
  3526 ;; Return value:  Size  Location     Type
  3527 ;;                  1    wreg      void 
  3528 ;; Registers used:
  3529 ;;		cstack
  3530 ;; Tracked objects:
  3531 ;;		On entry : 0/0
  3532 ;;		On exit  : 0/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3535 ;;      Params:         0       0       0       0       0       0       0
  3536 ;;      Locals:         0       0       0       0       0       0       0
  3537 ;;      Temps:          0       0       0       0       0       0       0
  3538 ;;      Totals:         0       0       0       0       0       0       0
  3539 ;;Total ram usage:        0 bytes
  3540 ;; Hardware stack levels used:    1
  3541 ;; Hardware stack levels required when called:    2
  3542 ;; This function calls:
  3543 ;;		_i2c_idle
  3544 ;; This function is called by:
  3545 ;;		_eeprom_at24c04_random_read
  3546 ;;		_eeprom_at24c04_byte_write
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           	psect	text21
  3551  00118E                     __ptext21:
  3552                           	opt stack 0
  3553  00118E                     _i2c_stop:
  3554                           	opt stack 25
  3555                           
  3556                           ;i2c.c: 44: PEN = 1;
  3557                           
  3558                           ;incstack = 0
  3559  00118E  84C5               	bsf	4037,2,c	;volatile
  3560                           
  3561                           ;i2c.c: 45: i2c_idle();
  3562  001190  ECD7  F008         	call	_i2c_idle	;wreg free
  3563  001194  0012               	return		;funcret
  3564  001196                     __end_of_i2c_stop:
  3565                           	opt stack 0
  3566                           tblptru	equ	0xFF8
  3567                           tblptrh	equ	0xFF7
  3568                           tblptrl	equ	0xFF6
  3569                           tablat	equ	0xFF5
  3570                           prodh	equ	0xFF4
  3571                           prodl	equ	0xFF3
  3572                           intcon	equ	0xFF2
  3573                           postinc0	equ	0xFEE
  3574                           wreg	equ	0xFE8
  3575                           indf2	equ	0xFDF
  3576                           plusw2	equ	0xFDB
  3577                           fsr2h	equ	0xFDA
  3578                           fsr2l	equ	0xFD9
  3579                           status	equ	0xFD8
  3580                           
  3581 ;; *************** function _i2c_start *****************
  3582 ;; Defined at:
  3583 ;;		line 36 in file "i2c.c"
  3584 ;; Parameters:    Size  Location     Type
  3585 ;;		None
  3586 ;; Auto vars:     Size  Location     Type
  3587 ;;		None
  3588 ;; Return value:  Size  Location     Type
  3589 ;;                  1    wreg      void 
  3590 ;; Registers used:
  3591 ;;		cstack
  3592 ;; Tracked objects:
  3593 ;;		On entry : 0/0
  3594 ;;		On exit  : 0/0
  3595 ;;		Unchanged: 0/0
  3596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3597 ;;      Params:         0       0       0       0       0       0       0
  3598 ;;      Locals:         0       0       0       0       0       0       0
  3599 ;;      Temps:          0       0       0       0       0       0       0
  3600 ;;      Totals:         0       0       0       0       0       0       0
  3601 ;;Total ram usage:        0 bytes
  3602 ;; Hardware stack levels used:    1
  3603 ;; Hardware stack levels required when called:    2
  3604 ;; This function calls:
  3605 ;;		_i2c_idle
  3606 ;; This function is called by:
  3607 ;;		_eeprom_at24c04_random_read
  3608 ;;		_eeprom_at24c04_byte_write
  3609 ;;		_eeprom_at24c04_cur_addr_read
  3610 ;; This function uses a non-reentrant model
  3611 ;;
  3612                           
  3613                           	psect	text22
  3614  001196                     __ptext22:
  3615                           	opt stack 0
  3616  001196                     _i2c_start:
  3617                           	opt stack 25
  3618                           
  3619                           ;i2c.c: 38: SEN = 1;
  3620                           
  3621                           ;incstack = 0
  3622  001196  80C5               	bsf	4037,0,c	;volatile
  3623                           
  3624                           ;i2c.c: 39: i2c_idle();
  3625  001198  ECD7  F008         	call	_i2c_idle	;wreg free
  3626  00119C  0012               	return		;funcret
  3627  00119E                     __end_of_i2c_start:
  3628                           	opt stack 0
  3629                           tblptru	equ	0xFF8
  3630                           tblptrh	equ	0xFF7
  3631                           tblptrl	equ	0xFF6
  3632                           tablat	equ	0xFF5
  3633                           prodh	equ	0xFF4
  3634                           prodl	equ	0xFF3
  3635                           intcon	equ	0xFF2
  3636                           postinc0	equ	0xFEE
  3637                           wreg	equ	0xFE8
  3638                           indf2	equ	0xFDF
  3639                           plusw2	equ	0xFDB
  3640                           fsr2h	equ	0xFDA
  3641                           fsr2l	equ	0xFD9
  3642                           status	equ	0xFD8
  3643                           
  3644 ;; *************** function _i2c_rep_start *****************
  3645 ;; Defined at:
  3646 ;;		line 48 in file "i2c.c"
  3647 ;; Parameters:    Size  Location     Type
  3648 ;;		None
  3649 ;; Auto vars:     Size  Location     Type
  3650 ;;		None
  3651 ;; Return value:  Size  Location     Type
  3652 ;;                  1    wreg      void 
  3653 ;; Registers used:
  3654 ;;		cstack
  3655 ;; Tracked objects:
  3656 ;;		On entry : 0/0
  3657 ;;		On exit  : 0/0
  3658 ;;		Unchanged: 0/0
  3659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3660 ;;      Params:         0       0       0       0       0       0       0
  3661 ;;      Locals:         0       0       0       0       0       0       0
  3662 ;;      Temps:          0       0       0       0       0       0       0
  3663 ;;      Totals:         0       0       0       0       0       0       0
  3664 ;;Total ram usage:        0 bytes
  3665 ;; Hardware stack levels used:    1
  3666 ;; Hardware stack levels required when called:    2
  3667 ;; This function calls:
  3668 ;;		_i2c_idle
  3669 ;; This function is called by:
  3670 ;;		_eeprom_at24c04_random_read
  3671 ;; This function uses a non-reentrant model
  3672 ;;
  3673                           
  3674                           	psect	text23
  3675  00119E                     __ptext23:
  3676                           	opt stack 0
  3677  00119E                     _i2c_rep_start:
  3678                           	opt stack 26
  3679                           
  3680                           ;i2c.c: 50: RSEN = 1;
  3681                           
  3682                           ;incstack = 0
  3683  00119E  82C5               	bsf	4037,1,c	;volatile
  3684                           
  3685                           ;i2c.c: 51: i2c_idle();
  3686  0011A0  ECD7  F008         	call	_i2c_idle	;wreg free
  3687  0011A4  0012               	return		;funcret
  3688  0011A6                     __end_of_i2c_rep_start:
  3689                           	opt stack 0
  3690                           tblptru	equ	0xFF8
  3691                           tblptrh	equ	0xFF7
  3692                           tblptrl	equ	0xFF6
  3693                           tablat	equ	0xFF5
  3694                           prodh	equ	0xFF4
  3695                           prodl	equ	0xFF3
  3696                           intcon	equ	0xFF2
  3697                           postinc0	equ	0xFEE
  3698                           wreg	equ	0xFE8
  3699                           indf2	equ	0xFDF
  3700                           plusw2	equ	0xFDB
  3701                           fsr2h	equ	0xFDA
  3702                           fsr2l	equ	0xFD9
  3703                           status	equ	0xFD8
  3704                           
  3705 ;; *************** function _i2c_read *****************
  3706 ;; Defined at:
  3707 ;;		line 72 in file "i2c.c"
  3708 ;; Parameters:    Size  Location     Type
  3709 ;;		None
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;		None
  3712 ;; Return value:  Size  Location     Type
  3713 ;;                  1    wreg      unsigned char 
  3714 ;; Registers used:
  3715 ;;		wreg, status,2, cstack
  3716 ;; Tracked objects:
  3717 ;;		On entry : 0/0
  3718 ;;		On exit  : 0/0
  3719 ;;		Unchanged: 0/0
  3720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3721 ;;      Params:         0       0       0       0       0       0       0
  3722 ;;      Locals:         0       0       0       0       0       0       0
  3723 ;;      Temps:          0       0       0       0       0       0       0
  3724 ;;      Totals:         0       0       0       0       0       0       0
  3725 ;;Total ram usage:        0 bytes
  3726 ;; Hardware stack levels used:    1
  3727 ;; Hardware stack levels required when called:    3
  3728 ;; This function calls:
  3729 ;;		_i2c_no_ack
  3730 ;;		_i2c_rx_mode
  3731 ;; This function is called by:
  3732 ;;		_eeprom_at24c04_random_read
  3733 ;;		_eeprom_at24c04_cur_addr_read
  3734 ;; This function uses a non-reentrant model
  3735 ;;
  3736                           
  3737                           	psect	text24
  3738  001170                     __ptext24:
  3739                           	opt stack 0
  3740  001170                     _i2c_read:
  3741                           	opt stack 25
  3742                           
  3743                           ;i2c.c: 74: i2c_rx_mode();
  3744                           
  3745                           ;incstack = 0
  3746  001170  ECD3  F008         	call	_i2c_rx_mode	;wreg free
  3747                           
  3748                           ;i2c.c: 75: i2c_no_ack();
  3749  001174  ECDB  F008         	call	_i2c_no_ack	;wreg free
  3750                           
  3751                           ;i2c.c: 77: return SSPBUF;
  3752  001178  50C9               	movf	4041,w,c	;volatile
  3753  00117A  0012               	return	
  3754  00117C                     __end_of_i2c_read:
  3755                           	opt stack 0
  3756                           tblptru	equ	0xFF8
  3757                           tblptrh	equ	0xFF7
  3758                           tblptrl	equ	0xFF6
  3759                           tablat	equ	0xFF5
  3760                           prodh	equ	0xFF4
  3761                           prodl	equ	0xFF3
  3762                           intcon	equ	0xFF2
  3763                           postinc0	equ	0xFEE
  3764                           wreg	equ	0xFE8
  3765                           indf2	equ	0xFDF
  3766                           plusw2	equ	0xFDB
  3767                           fsr2h	equ	0xFDA
  3768                           fsr2l	equ	0xFD9
  3769                           status	equ	0xFD8
  3770                           
  3771 ;; *************** function _i2c_rx_mode *****************
  3772 ;; Defined at:
  3773 ;;		line 60 in file "i2c.c"
  3774 ;; Parameters:    Size  Location     Type
  3775 ;;		None
  3776 ;; Auto vars:     Size  Location     Type
  3777 ;;		None
  3778 ;; Return value:  Size  Location     Type
  3779 ;;                  1    wreg      void 
  3780 ;; Registers used:
  3781 ;;		cstack
  3782 ;; Tracked objects:
  3783 ;;		On entry : 0/0
  3784 ;;		On exit  : 0/0
  3785 ;;		Unchanged: 0/0
  3786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3787 ;;      Params:         0       0       0       0       0       0       0
  3788 ;;      Locals:         0       0       0       0       0       0       0
  3789 ;;      Temps:          0       0       0       0       0       0       0
  3790 ;;      Totals:         0       0       0       0       0       0       0
  3791 ;;Total ram usage:        0 bytes
  3792 ;; Hardware stack levels used:    1
  3793 ;; Hardware stack levels required when called:    2
  3794 ;; This function calls:
  3795 ;;		_i2c_idle
  3796 ;; This function is called by:
  3797 ;;		_i2c_read
  3798 ;; This function uses a non-reentrant model
  3799 ;;
  3800                           
  3801                           	psect	text25
  3802  0011A6                     __ptext25:
  3803                           	opt stack 0
  3804  0011A6                     _i2c_rx_mode:
  3805                           	opt stack 25
  3806                           
  3807                           ;i2c.c: 62: RCEN = 1;
  3808                           
  3809                           ;incstack = 0
  3810  0011A6  86C5               	bsf	4037,3,c	;volatile
  3811                           
  3812                           ;i2c.c: 63: i2c_idle();
  3813  0011A8  ECD7  F008         	call	_i2c_idle	;wreg free
  3814  0011AC  0012               	return		;funcret
  3815  0011AE                     __end_of_i2c_rx_mode:
  3816                           	opt stack 0
  3817                           tblptru	equ	0xFF8
  3818                           tblptrh	equ	0xFF7
  3819                           tblptrl	equ	0xFF6
  3820                           tablat	equ	0xFF5
  3821                           prodh	equ	0xFF4
  3822                           prodl	equ	0xFF3
  3823                           intcon	equ	0xFF2
  3824                           postinc0	equ	0xFEE
  3825                           wreg	equ	0xFE8
  3826                           indf2	equ	0xFDF
  3827                           plusw2	equ	0xFDB
  3828                           fsr2h	equ	0xFDA
  3829                           fsr2l	equ	0xFD9
  3830                           status	equ	0xFD8
  3831                           
  3832 ;; *************** function _i2c_idle *****************
  3833 ;; Defined at:
  3834 ;;		line 22 in file "i2c.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;		None
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;		None
  3839 ;; Return value:  Size  Location     Type
  3840 ;;                  1    wreg      void 
  3841 ;; Registers used:
  3842 ;;		None
  3843 ;; Tracked objects:
  3844 ;;		On entry : 0/0
  3845 ;;		On exit  : 0/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3848 ;;      Params:         0       0       0       0       0       0       0
  3849 ;;      Locals:         0       0       0       0       0       0       0
  3850 ;;      Temps:          0       0       0       0       0       0       0
  3851 ;;      Totals:         0       0       0       0       0       0       0
  3852 ;;Total ram usage:        0 bytes
  3853 ;; Hardware stack levels used:    1
  3854 ;; Hardware stack levels required when called:    1
  3855 ;; This function calls:
  3856 ;;		Nothing
  3857 ;; This function is called by:
  3858 ;;		_i2c_start
  3859 ;;		_i2c_stop
  3860 ;;		_i2c_rep_start
  3861 ;;		_i2c_write
  3862 ;;		_i2c_rx_mode
  3863 ;; This function uses a non-reentrant model
  3864 ;;
  3865                           
  3866                           	psect	text26
  3867  0011AE                     __ptext26:
  3868                           	opt stack 0
  3869  0011AE                     _i2c_idle:
  3870                           	opt stack 25
  3871  0011AE                     l385:
  3872  0011AE  A69E               	btfss	3998,3,c	;volatile
  3873  0011B0  D7FE               	goto	l385
  3874                           
  3875                           ;i2c.c: 25: SSPIF = 0;
  3876  0011B2  969E               	bcf	3998,3,c	;volatile
  3877  0011B4  0012               	return		;funcret
  3878  0011B6                     __end_of_i2c_idle:
  3879                           	opt stack 0
  3880                           tblptru	equ	0xFF8
  3881                           tblptrh	equ	0xFF7
  3882                           tblptrl	equ	0xFF6
  3883                           tablat	equ	0xFF5
  3884                           prodh	equ	0xFF4
  3885                           prodl	equ	0xFF3
  3886                           intcon	equ	0xFF2
  3887                           postinc0	equ	0xFEE
  3888                           wreg	equ	0xFE8
  3889                           indf2	equ	0xFDF
  3890                           plusw2	equ	0xFDB
  3891                           fsr2h	equ	0xFDA
  3892                           fsr2l	equ	0xFD9
  3893                           status	equ	0xFD8
  3894                           
  3895 ;; *************** function _i2c_no_ack *****************
  3896 ;; Defined at:
  3897 ;;		line 66 in file "i2c.c"
  3898 ;; Parameters:    Size  Location     Type
  3899 ;;		None
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;		None
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  1    wreg      void 
  3904 ;; Registers used:
  3905 ;;		None
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3911 ;;      Params:         0       0       0       0       0       0       0
  3912 ;;      Locals:         0       0       0       0       0       0       0
  3913 ;;      Temps:          0       0       0       0       0       0       0
  3914 ;;      Totals:         0       0       0       0       0       0       0
  3915 ;;Total ram usage:        0 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; Hardware stack levels required when called:    1
  3918 ;; This function calls:
  3919 ;;		Nothing
  3920 ;; This function is called by:
  3921 ;;		_i2c_read
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           	psect	text27
  3926  0011B6                     __ptext27:
  3927                           	opt stack 0
  3928  0011B6                     _i2c_no_ack:
  3929                           	opt stack 26
  3930                           
  3931                           ;i2c.c: 68: ACKDT = 1;
  3932                           
  3933                           ;incstack = 0
  3934  0011B6  8AC5               	bsf	4037,5,c	;volatile
  3935                           
  3936                           ;i2c.c: 69: ACKEN = 1;
  3937  0011B8  88C5               	bsf	4037,4,c	;volatile
  3938  0011BA  0012               	return		;funcret
  3939  0011BC                     __end_of_i2c_no_ack:
  3940                           	opt stack 0
  3941                           tblptru	equ	0xFF8
  3942                           tblptrh	equ	0xFF7
  3943                           tblptrl	equ	0xFF6
  3944                           tablat	equ	0xFF5
  3945                           prodh	equ	0xFF4
  3946                           prodl	equ	0xFF3
  3947                           intcon	equ	0xFF2
  3948                           postinc0	equ	0xFEE
  3949                           wreg	equ	0xFE8
  3950                           indf2	equ	0xFDF
  3951                           plusw2	equ	0xFDB
  3952                           fsr2h	equ	0xFDA
  3953                           fsr2l	equ	0xFD9
  3954                           status	equ	0xFD8
  3955                           
  3956 ;; *************** function _convert_to_byte *****************
  3957 ;; Defined at:
  3958 ;;		line 27 in file "main.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;  data            2   22[COMRAM] PTR unsigned char 
  3961 ;;		 -> node_id(4), 
  3962 ;;  value           2   24[COMRAM] unsigned short 
  3963 ;; Auto vars:     Size  Location     Type
  3964 ;;  i               2   28[COMRAM] int 
  3965 ;;  a               2   26[COMRAM] int 
  3966 ;; Return value:  Size  Location     Type
  3967 ;;                  1    wreg      void 
  3968 ;; Registers used:
  3969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3970 ;; Tracked objects:
  3971 ;;		On entry : 0/0
  3972 ;;		On exit  : 0/0
  3973 ;;		Unchanged: 0/0
  3974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3975 ;;      Params:         4       0       0       0       0       0       0
  3976 ;;      Locals:         4       0       0       0       0       0       0
  3977 ;;      Temps:          0       0       0       0       0       0       0
  3978 ;;      Totals:         8       0       0       0       0       0       0
  3979 ;;Total ram usage:        8 bytes
  3980 ;; Hardware stack levels used:    1
  3981 ;; Hardware stack levels required when called:    2
  3982 ;; This function calls:
  3983 ;;		___lwdiv
  3984 ;;		___lwmod
  3985 ;; This function is called by:
  3986 ;;		_init_config
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           	psect	text28
  3991  000E2E                     __ptext28:
  3992                           	opt stack 0
  3993  000E2E                     _convert_to_byte:
  3994                           	opt stack 27
  3995                           
  3996                           ;main.c: 29: int a,i = 3;
  3997                           
  3998                           ;incstack = 0
  3999  000E2E  0E00               	movlw	0
  4000  000E30  6E44               	movwf	convert_to_byte@i+1,c
  4001  000E32  0E03               	movlw	3
  4002  000E34  6E43               	movwf	convert_to_byte@i,c
  4003  000E36                     l2251:
  4004                           
  4005                           ;main.c: 31: {
  4006                           ;main.c: 32: a = value % 10 ;
  4007  000E36  C03F  F036         	movff	convert_to_byte@value,___lwmod@dividend
  4008  000E3A  C040  F037         	movff	convert_to_byte@value+1,___lwmod@dividend+1
  4009  000E3E  0E00               	movlw	0
  4010  000E40  6E39               	movwf	___lwmod@divisor+1,c
  4011  000E42  0E0A               	movlw	10
  4012  000E44  6E38               	movwf	___lwmod@divisor,c
  4013  000E46  EC02  F008         	call	___lwmod	;wreg free
  4014  000E4A  C036  F041         	movff	?___lwmod,convert_to_byte@a
  4015  000E4E  C037  F042         	movff	?___lwmod+1,convert_to_byte@a+1
  4016                           
  4017                           ;main.c: 33: value = value / 10;
  4018  000E52  C03F  F036         	movff	convert_to_byte@value,___lwdiv@dividend
  4019  000E56  C040  F037         	movff	convert_to_byte@value+1,___lwdiv@dividend+1
  4020  000E5A  0E00               	movlw	0
  4021  000E5C  6E39               	movwf	___lwdiv@divisor+1,c
  4022  000E5E  0E0A               	movlw	10
  4023  000E60  6E38               	movwf	___lwdiv@divisor,c
  4024  000E62  EC74  F007         	call	___lwdiv	;wreg free
  4025  000E66  C036  F03F         	movff	?___lwdiv,convert_to_byte@value
  4026  000E6A  C037  F040         	movff	?___lwdiv+1,convert_to_byte@value+1
  4027                           
  4028                           ;main.c: 34: data[i] = a;
  4029  000E6E  5043               	movf	convert_to_byte@i,w,c
  4030  000E70  243D               	addwf	convert_to_byte@data,w,c
  4031  000E72  6ED9               	movwf	fsr2l,c
  4032  000E74  5044               	movf	convert_to_byte@i+1,w,c
  4033  000E76  203E               	addwfc	convert_to_byte@data+1,w,c
  4034  000E78  6EDA               	movwf	fsr2h,c
  4035  000E7A  C041  FFDF         	movff	convert_to_byte@a,indf2
  4036                           
  4037                           ;main.c: 36: } while (i--);
  4038  000E7E  0643               	decf	convert_to_byte@i,f,c
  4039  000E80  A0D8               	btfss	status,0,c
  4040  000E82  0644               	decf	convert_to_byte@i+1,f,c
  4041  000E84  2843               	incf	convert_to_byte@i,w,c
  4042  000E86  E1D7               	bnz	l2251
  4043  000E88  2844               	incf	convert_to_byte@i+1,w,c
  4044  000E8A  B4D8               	btfsc	status,2,c
  4045  000E8C  0012               	return	
  4046  000E8E  D7D3               	goto	l2251
  4047  000E90                     __end_of_convert_to_byte:
  4048                           	opt stack 0
  4049                           tblptru	equ	0xFF8
  4050                           tblptrh	equ	0xFF7
  4051                           tblptrl	equ	0xFF6
  4052                           tablat	equ	0xFF5
  4053                           prodh	equ	0xFF4
  4054                           prodl	equ	0xFF3
  4055                           intcon	equ	0xFF2
  4056                           postinc0	equ	0xFEE
  4057                           wreg	equ	0xFE8
  4058                           indf2	equ	0xFDF
  4059                           plusw2	equ	0xFDB
  4060                           fsr2h	equ	0xFDA
  4061                           fsr2l	equ	0xFD9
  4062                           status	equ	0xFD8
  4063                           
  4064 ;; *************** function ___lwmod *****************
  4065 ;; Defined at:
  4066 ;;		line 8 in file "/opt/microchip/xc8/v1.36/sources/common/lwmod.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;  dividend        2   15[COMRAM] unsigned int 
  4069 ;;  divisor         2   17[COMRAM] unsigned int 
  4070 ;; Auto vars:     Size  Location     Type
  4071 ;;  counter         1   19[COMRAM] unsigned char 
  4072 ;; Return value:  Size  Location     Type
  4073 ;;                  2   15[COMRAM] unsigned int 
  4074 ;; Registers used:
  4075 ;;		wreg, status,2, status,0
  4076 ;; Tracked objects:
  4077 ;;		On entry : 0/0
  4078 ;;		On exit  : 0/0
  4079 ;;		Unchanged: 0/0
  4080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4081 ;;      Params:         4       0       0       0       0       0       0
  4082 ;;      Locals:         1       0       0       0       0       0       0
  4083 ;;      Temps:          0       0       0       0       0       0       0
  4084 ;;      Totals:         5       0       0       0       0       0       0
  4085 ;;Total ram usage:        5 bytes
  4086 ;; Hardware stack levels used:    1
  4087 ;; Hardware stack levels required when called:    1
  4088 ;; This function calls:
  4089 ;;		Nothing
  4090 ;; This function is called by:
  4091 ;;		_convert_to_byte
  4092 ;;		_node_operation
  4093 ;; This function uses a non-reentrant model
  4094 ;;
  4095                           
  4096                           	psect	text29
  4097  001004                     __ptext29:
  4098                           	opt stack 0
  4099  001004                     ___lwmod:
  4100                           	opt stack 27
  4101                           
  4102                           ;incstack = 0
  4103  001004  5038               	movf	___lwmod@divisor,w,c
  4104  001006  1039               	iorwf	___lwmod@divisor+1,w,c
  4105  001008  B4D8               	btfsc	status,2,c
  4106  00100A  D018               	goto	l826
  4107  00100C  0E01               	movlw	1
  4108  00100E  6E3A               	movwf	___lwmod@counter,c
  4109  001010  D004               	goto	l2221
  4110  001012                     l2219:
  4111  001012  90D8               	bcf	status,0,c
  4112  001014  3638               	rlcf	___lwmod@divisor,f,c
  4113  001016  3639               	rlcf	___lwmod@divisor+1,f,c
  4114  001018  2A3A               	incf	___lwmod@counter,f,c
  4115  00101A                     l2221:
  4116  00101A  AE39               	btfss	___lwmod@divisor+1,7,c
  4117  00101C  D7FA               	goto	l2219
  4118  00101E                     l2223:
  4119  00101E  5038               	movf	___lwmod@divisor,w,c
  4120  001020  5C36               	subwf	___lwmod@dividend,w,c
  4121  001022  5039               	movf	___lwmod@divisor+1,w,c
  4122  001024  5837               	subwfb	___lwmod@dividend+1,w,c
  4123  001026  A0D8               	btfss	status,0,c
  4124  001028  D004               	goto	l2227
  4125  00102A  5038               	movf	___lwmod@divisor,w,c
  4126  00102C  5E36               	subwf	___lwmod@dividend,f,c
  4127  00102E  5039               	movf	___lwmod@divisor+1,w,c
  4128  001030  5A37               	subwfb	___lwmod@dividend+1,f,c
  4129  001032                     l2227:
  4130  001032  90D8               	bcf	status,0,c
  4131  001034  3239               	rrcf	___lwmod@divisor+1,f,c
  4132  001036  3238               	rrcf	___lwmod@divisor,f,c
  4133  001038  2E3A               	decfsz	___lwmod@counter,f,c
  4134  00103A  D7F1               	goto	l2223
  4135  00103C                     l826:
  4136  00103C  C036  F036         	movff	___lwmod@dividend,?___lwmod
  4137  001040  C037  F037         	movff	___lwmod@dividend+1,?___lwmod+1
  4138  001044  0012               	return		;funcret
  4139  001046                     __end_of___lwmod:
  4140                           	opt stack 0
  4141                           tblptru	equ	0xFF8
  4142                           tblptrh	equ	0xFF7
  4143                           tblptrl	equ	0xFF6
  4144                           tablat	equ	0xFF5
  4145                           prodh	equ	0xFF4
  4146                           prodl	equ	0xFF3
  4147                           intcon	equ	0xFF2
  4148                           postinc0	equ	0xFEE
  4149                           wreg	equ	0xFE8
  4150                           indf2	equ	0xFDF
  4151                           plusw2	equ	0xFDB
  4152                           fsr2h	equ	0xFDA
  4153                           fsr2l	equ	0xFD9
  4154                           status	equ	0xFD8
  4155                           
  4156 ;; *************** function ___lwdiv *****************
  4157 ;; Defined at:
  4158 ;;		line 8 in file "/opt/microchip/xc8/v1.36/sources/common/lwdiv.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  dividend        2   15[COMRAM] unsigned int 
  4161 ;;  divisor         2   17[COMRAM] unsigned int 
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;  quotient        2   20[COMRAM] unsigned int 
  4164 ;;  counter         1   19[COMRAM] unsigned char 
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  2   15[COMRAM] unsigned int 
  4167 ;; Registers used:
  4168 ;;		wreg, status,2, status,0
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4174 ;;      Params:         4       0       0       0       0       0       0
  4175 ;;      Locals:         3       0       0       0       0       0       0
  4176 ;;      Temps:          0       0       0       0       0       0       0
  4177 ;;      Totals:         7       0       0       0       0       0       0
  4178 ;;Total ram usage:        7 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; Hardware stack levels required when called:    1
  4181 ;; This function calls:
  4182 ;;		Nothing
  4183 ;; This function is called by:
  4184 ;;		_convert_to_byte
  4185 ;;		_node_operation
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           	psect	text30
  4190  000EE8                     __ptext30:
  4191                           	opt stack 0
  4192  000EE8                     ___lwdiv:
  4193                           	opt stack 27
  4194                           
  4195                           ;incstack = 0
  4196  000EE8  0E00               	movlw	0
  4197  000EEA  6E3C               	movwf	___lwdiv@quotient+1,c
  4198  000EEC  0E00               	movlw	0
  4199  000EEE  6E3B               	movwf	___lwdiv@quotient,c
  4200  000EF0  5038               	movf	___lwdiv@divisor,w,c
  4201  000EF2  1039               	iorwf	___lwdiv@divisor+1,w,c
  4202  000EF4  B4D8               	btfsc	status,2,c
  4203  000EF6  D01C               	goto	l816
  4204  000EF8  0E01               	movlw	1
  4205  000EFA  6E3A               	movwf	___lwdiv@counter,c
  4206  000EFC  D004               	goto	l2201
  4207  000EFE                     l2199:
  4208  000EFE  90D8               	bcf	status,0,c
  4209  000F00  3638               	rlcf	___lwdiv@divisor,f,c
  4210  000F02  3639               	rlcf	___lwdiv@divisor+1,f,c
  4211  000F04  2A3A               	incf	___lwdiv@counter,f,c
  4212  000F06                     l2201:
  4213  000F06  AE39               	btfss	___lwdiv@divisor+1,7,c
  4214  000F08  D7FA               	goto	l2199
  4215  000F0A                     l2203:
  4216  000F0A  90D8               	bcf	status,0,c
  4217  000F0C  363B               	rlcf	___lwdiv@quotient,f,c
  4218  000F0E  363C               	rlcf	___lwdiv@quotient+1,f,c
  4219  000F10  5038               	movf	___lwdiv@divisor,w,c
  4220  000F12  5C36               	subwf	___lwdiv@dividend,w,c
  4221  000F14  5039               	movf	___lwdiv@divisor+1,w,c
  4222  000F16  5837               	subwfb	___lwdiv@dividend+1,w,c
  4223  000F18  A0D8               	btfss	status,0,c
  4224  000F1A  D005               	goto	l2211
  4225  000F1C  5038               	movf	___lwdiv@divisor,w,c
  4226  000F1E  5E36               	subwf	___lwdiv@dividend,f,c
  4227  000F20  5039               	movf	___lwdiv@divisor+1,w,c
  4228  000F22  5A37               	subwfb	___lwdiv@dividend+1,f,c
  4229  000F24  803B               	bsf	___lwdiv@quotient,0,c
  4230  000F26                     l2211:
  4231  000F26  90D8               	bcf	status,0,c
  4232  000F28  3239               	rrcf	___lwdiv@divisor+1,f,c
  4233  000F2A  3238               	rrcf	___lwdiv@divisor,f,c
  4234  000F2C  2E3A               	decfsz	___lwdiv@counter,f,c
  4235  000F2E  D7ED               	goto	l2203
  4236  000F30                     l816:
  4237  000F30  C03B  F036         	movff	___lwdiv@quotient,?___lwdiv
  4238  000F34  C03C  F037         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4239  000F38  0012               	return		;funcret
  4240  000F3A                     __end_of___lwdiv:
  4241                           	opt stack 0
  4242                           tblptru	equ	0xFF8
  4243                           tblptrh	equ	0xFF7
  4244                           tblptrl	equ	0xFF6
  4245                           tablat	equ	0xFF5
  4246                           prodh	equ	0xFF4
  4247                           prodl	equ	0xFF3
  4248                           intcon	equ	0xFF2
  4249                           postinc0	equ	0xFEE
  4250                           wreg	equ	0xFE8
  4251                           indf2	equ	0xFDF
  4252                           plusw2	equ	0xFDB
  4253                           fsr2h	equ	0xFDA
  4254                           fsr2l	equ	0xFD9
  4255                           status	equ	0xFD8
  4256                           
  4257 ;; *************** function _isr *****************
  4258 ;; Defined at:
  4259 ;;		line 5 in file "isr.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;		None
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;		None
  4264 ;; Return value:  Size  Location     Type
  4265 ;;                  1    wreg      void 
  4266 ;; Registers used:
  4267 ;;		wreg, status,2, status,0
  4268 ;; Tracked objects:
  4269 ;;		On entry : 0/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4273 ;;      Params:         0       0       0       0       0       0       0
  4274 ;;      Locals:         0       0       0       0       0       0       0
  4275 ;;      Temps:         15       0       0       0       0       0       0
  4276 ;;      Totals:        15       0       0       0       0       0       0
  4277 ;;Total ram usage:       15 bytes
  4278 ;; Hardware stack levels used:    1
  4279 ;; This function calls:
  4280 ;;		Nothing
  4281 ;; This function is called by:
  4282 ;;		Interrupt level 2
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           	psect	intcode
  4287  000008                     __pintcode:
  4288                           	opt stack 0
  4289  000008                     _isr:
  4290                           	opt stack 25
  4291                           
  4292                           ;incstack = 0
  4293  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4294  00000A  CFFA F028          	movff	pclath,??_isr+1
  4295  00000E  CFFB F029          	movff	pclatu,??_isr+2
  4296  000012  EDBE  F005         	call	int_func,f	;refresh shadow registers
  4297                           pclatu	equ	0xFFB
  4298                           pclath	equ	0xFFA
  4299                           tblptru	equ	0xFF8
  4300                           tblptrh	equ	0xFF7
  4301                           tblptrl	equ	0xFF6
  4302                           tablat	equ	0xFF5
  4303                           prodh	equ	0xFF4
  4304                           prodl	equ	0xFF3
  4305                           intcon	equ	0xFF2
  4306                           postinc0	equ	0xFEE
  4307                           wreg	equ	0xFE8
  4308                           indf2	equ	0xFDF
  4309                           plusw2	equ	0xFDB
  4310                           fsr2h	equ	0xFDA
  4311                           fsr2l	equ	0xFD9
  4312                           status	equ	0xFD8
  4313                           
  4314                           	psect	intcode_body
  4315  000B7C                     __pintcode_body:
  4316                           	opt stack 25
  4317  000B7C                     int_func:
  4318                           	opt stack 25
  4319  000B7C  0006               	pop		; remove dummy address from shadow register refresh
  4320  000B7E  CFE9 F02A          	movff	fsr0l,??_isr+3
  4321  000B82  CFEA F02B          	movff	fsr0h,??_isr+4
  4322  000B86  CFE1 F02C          	movff	fsr1l,??_isr+5
  4323  000B8A  CFE2 F02D          	movff	fsr1h,??_isr+6
  4324  000B8E  CFD9 F02E          	movff	fsr2l,??_isr+7
  4325  000B92  CFDA F02F          	movff	fsr2h,??_isr+8
  4326  000B96  CFF3 F030          	movff	prodl,??_isr+9
  4327  000B9A  CFF4 F031          	movff	prodh,??_isr+10
  4328  000B9E  CFF6 F032          	movff	tblptrl,??_isr+11
  4329  000BA2  CFF7 F033          	movff	tblptrh,??_isr+12
  4330  000BA6  CFF8 F034          	movff	tblptru,??_isr+13
  4331  000BAA  CFF5 F035          	movff	tablat,??_isr+14
  4332                           
  4333                           ;isr.c: 7: static unsigned short count1;
  4334                           ;isr.c: 9: if (TMR0IF)
  4335  000BAE  A4F2               	btfss	intcon,2,c	;volatile
  4336  000BB0  D029               	goto	i2l28
  4337                           
  4338                           ;isr.c: 10: {
  4339                           ;isr.c: 11: TMR0 = TMR0 + 8;
  4340  000BB2  0E08               	movlw	8
  4341  000BB4  24D6               	addwf	4054,w,c	;volatile
  4342  000BB6  6ED6               	movwf	4054,c	;volatile
  4343  000BB8  0E00               	movlw	0
  4344  000BBA  20D7               	addwfc	4055,w,c	;volatile
  4345  000BBC  6ED7               	movwf	4055,c	;volatile
  4346                           
  4347                           ;isr.c: 13: if (message_received == 1)
  4348  000BBE  A04D               	btfss	_message_received/(0+8),_message_received& (0+7),c	;volatile
  4349  000BC0  D01B               	goto	i2l1573
  4350                           
  4351                           ;isr.c: 14: {
  4352                           ;isr.c: 15: if (count1++ == 10000)
  4353  000BC2  4A0E               	infsnz	isr@count1,f,c
  4354  000BC4  2A0F               	incf	isr@count1+1,f,c
  4355  000BC6  0E11               	movlw	17
  4356  000BC8  180E               	xorwf	isr@count1,w,c
  4357  000BCA  E11B               	bnz	i2l1577
  4358  000BCC  0E27               	movlw	39
  4359  000BCE  180F               	xorwf	isr@count1+1,w,c
  4360  000BD0  A4D8               	btfss	status,2,c
  4361  000BD2  D017               	goto	i2l1577
  4362                           
  4363                           ;isr.c: 16: {
  4364                           ;isr.c: 17: count1 = 0;
  4365  000BD4  0E00               	movlw	0
  4366  000BD6  6E0F               	movwf	isr@count1+1,c
  4367  000BD8  0E00               	movlw	0
  4368  000BDA  6E0E               	movwf	isr@count1,c
  4369                           
  4370                           ;isr.c: 19: PORTBbits.RB7 = !PORTBbits.RB7;
  4371  000BDC  BE81               	btfsc	3969,7,c	;volatile
  4372  000BDE  D003               	goto	i2u70_40
  4373  000BE0  6A27               	clrf	??_isr& (0+255),c
  4374  000BE2  2A27               	incf	??_isr& (0+255),f,c
  4375  000BE4  D001               	goto	i2u71_48
  4376  000BE6                     i2u70_40:
  4377  000BE6  6A27               	clrf	??_isr& (0+255),c
  4378  000BE8                     i2u71_48:
  4379  000BE8  3227               	rrcf	??_isr,f,c
  4380  000BEA  3227               	rrcf	??_isr,f,c
  4381  000BEC  5081               	movf	3969,w,c	;volatile
  4382  000BEE  1827               	xorwf	??_isr,w,c
  4383  000BF0  0B7F               	andlw	-129
  4384  000BF2  1827               	xorwf	??_isr,w,c
  4385  000BF4  6E81               	movwf	3969,c	;volatile
  4386                           
  4387                           ;isr.c: 20: }
  4388                           ;isr.c: 21: }
  4389  000BF6  D005               	goto	i2l1577
  4390  000BF8                     i2l1573:
  4391                           
  4392                           ;isr.c: 22: else
  4393                           ;isr.c: 23: {
  4394                           ;isr.c: 24: count1 = 0;
  4395  000BF8  0E00               	movlw	0
  4396  000BFA  6E0F               	movwf	isr@count1+1,c
  4397  000BFC  0E00               	movlw	0
  4398  000BFE  6E0E               	movwf	isr@count1,c
  4399                           
  4400                           ;isr.c: 25: PORTBbits.RB7 = 0;
  4401  000C00  9E81               	bcf	3969,7,c	;volatile
  4402  000C02                     i2l1577:
  4403                           
  4404                           ;isr.c: 26: }
  4405                           ;isr.c: 28: TMR0IF = 0;
  4406  000C02  94F2               	bcf	intcon,2,c	;volatile
  4407  000C04                     i2l28:
  4408  000C04  C035  FFF5         	movff	??_isr+14,tablat
  4409  000C08  C034  FFF8         	movff	??_isr+13,tblptru
  4410  000C0C  C033  FFF7         	movff	??_isr+12,tblptrh
  4411  000C10  C032  FFF6         	movff	??_isr+11,tblptrl
  4412  000C14  C031  FFF4         	movff	??_isr+10,prodh
  4413  000C18  C030  FFF3         	movff	??_isr+9,prodl
  4414  000C1C  C02F  FFDA         	movff	??_isr+8,fsr2h
  4415  000C20  C02E  FFD9         	movff	??_isr+7,fsr2l
  4416  000C24  C02D  FFE2         	movff	??_isr+6,fsr1h
  4417  000C28  C02C  FFE1         	movff	??_isr+5,fsr1l
  4418  000C2C  C02B  FFEA         	movff	??_isr+4,fsr0h
  4419  000C30  C02A  FFE9         	movff	??_isr+3,fsr0l
  4420  000C34  C029  FFFB         	movff	??_isr+2,pclatu
  4421  000C38  C028  FFFA         	movff	??_isr+1,pclath
  4422  000C3C  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4423  000C3E  0011               	retfie		f
  4424  000C40                     __end_of_isr:
  4425                           	opt stack 0
  4426                           pclatu	equ	0xFFB
  4427                           pclath	equ	0xFFA
  4428                           tblptru	equ	0xFF8
  4429                           tblptrh	equ	0xFF7
  4430                           tblptrl	equ	0xFF6
  4431                           tablat	equ	0xFF5
  4432                           prodh	equ	0xFF4
  4433                           prodl	equ	0xFF3
  4434                           intcon	equ	0xFF2
  4435                           postinc0	equ	0xFEE
  4436                           fsr0h	equ	0xFEA
  4437                           fsr0l	equ	0xFE9
  4438                           wreg	equ	0xFE8
  4439                           fsr1h	equ	0xFE2
  4440                           fsr1l	equ	0xFE1
  4441                           indf2	equ	0xFDF
  4442                           plusw2	equ	0xFDB
  4443                           fsr2h	equ	0xFDA
  4444                           fsr2l	equ	0xFD9
  4445                           status	equ	0xFD8
  4446                           pclatu	equ	0xFFB
  4447                           pclath	equ	0xFFA
  4448                           tblptru	equ	0xFF8
  4449                           tblptrh	equ	0xFF7
  4450                           tblptrl	equ	0xFF6
  4451                           tablat	equ	0xFF5
  4452                           prodh	equ	0xFF4
  4453                           prodl	equ	0xFF3
  4454                           intcon	equ	0xFF2
  4455                           postinc0	equ	0xFEE
  4456                           fsr0h	equ	0xFEA
  4457                           fsr0l	equ	0xFE9
  4458                           wreg	equ	0xFE8
  4459                           fsr1h	equ	0xFE2
  4460                           fsr1l	equ	0xFE1
  4461                           indf2	equ	0xFDF
  4462                           plusw2	equ	0xFDB
  4463                           fsr2h	equ	0xFDA
  4464                           fsr2l	equ	0xFD9
  4465                           status	equ	0xFD8
  4466                           
  4467                           	psect	rparam
  4468  0000                     pclatu	equ	0xFFB
  4469                           pclath	equ	0xFFA
  4470                           tblptru	equ	0xFF8
  4471                           tblptrh	equ	0xFF7
  4472                           tblptrl	equ	0xFF6
  4473                           tablat	equ	0xFF5
  4474                           prodh	equ	0xFF4
  4475                           prodl	equ	0xFF3
  4476                           intcon	equ	0xFF2
  4477                           postinc0	equ	0xFEE
  4478                           fsr0h	equ	0xFEA
  4479                           fsr0l	equ	0xFE9
  4480                           wreg	equ	0xFE8
  4481                           fsr1h	equ	0xFE2
  4482                           fsr1l	equ	0xFE1
  4483                           indf2	equ	0xFDF
  4484                           plusw2	equ	0xFDB
  4485                           fsr2h	equ	0xFDA
  4486                           fsr2l	equ	0xFD9
  4487                           status	equ	0xFD8
  4488                           
  4489                           	psect	temp
  4490  000050                     btemp:
  4491                           	opt stack 0
  4492  000050                     	ds	1
  4493  0000                     int$flags	set	btemp
  4494                           pclatu	equ	0xFFB
  4495                           pclath	equ	0xFFA
  4496                           tblptru	equ	0xFF8
  4497                           tblptrh	equ	0xFF7
  4498                           tblptrl	equ	0xFF6
  4499                           tablat	equ	0xFF5
  4500                           prodh	equ	0xFF4
  4501                           prodl	equ	0xFF3
  4502                           intcon	equ	0xFF2
  4503                           postinc0	equ	0xFEE
  4504                           fsr0h	equ	0xFEA
  4505                           fsr0l	equ	0xFE9
  4506                           wreg	equ	0xFE8
  4507                           fsr1h	equ	0xFE2
  4508                           fsr1l	equ	0xFE1
  4509                           indf2	equ	0xFDF
  4510                           plusw2	equ	0xFDB
  4511                           fsr2h	equ	0xFDA
  4512                           fsr2l	equ	0xFD9
  4513                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    10
    Data        2
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      79
    BANK0           160      8      21
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    can_transmit@can_tx_payload	PTR const unsigned char  size(2) Largest target is 13
		 -> can_tx_payload(BANK0[13]), 

    display@data	PTR unsigned char  size(2) Largest target is 4
		 -> ssd(COMRAM[4]), 

    convert_to_byte@data	PTR unsigned char  size(2) Largest target is 4
		 -> node_id(COMRAM[4]), 

    convert_to_short@data	PTR unsigned char  size(2) Largest target is 4
		 -> node_config@count(COMRAM[4]), node_id(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_pick_to_light
    _pick_to_light->_node_config
    _pick_to_light->_node_operation
    _node_operation->_construct_payload
    _node_config->_construct_payload
    _eeprom_at24c04_byte_write->_delay_ms
    _construct_payload->_convert_to_short
    _convert_to_short->___wmul
    _init_config->_convert_to_byte
    _eeprom_at24c04_random_read->_i2c_write
    _convert_to_byte->___lwdiv

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _pick_to_light->_node_config

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    9176
                        _init_config
                      _pick_to_light
 ---------------------------------------------------------------------------------
 (1) _pick_to_light                                        1     1      0    7475
                                             37 COMRAM     1     1      0
                            _display
                     _mode_selection
                        _node_config
                     _node_operation
                _read_digital_keypad
 ---------------------------------------------------------------------------------
 (2) _read_digital_keypad                                  1     1      0      30
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _node_operation                                       9     9      0    3289
                                             35 COMRAM     2     2      0
                                              0 BANK0      7     7      0
                            ___lwdiv
                            ___lwmod
                        _can_receive
                       _can_transmit
                  _construct_payload
 ---------------------------------------------------------------------------------
 (3) _can_receive                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _node_config                                         10     8      2    3757
                                             35 COMRAM     2     0      2
                                              0 BANK0      8     8      0
                       _can_transmit
                  _construct_payload
                   _convert_to_short
          _eeprom_at24c04_byte_write
 ---------------------------------------------------------------------------------
 (3) _eeprom_at24c04_byte_write                            2     1      1     346
                                             18 COMRAM     2     1      1
                           _delay_ms
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _construct_payload                                    7     4      3    1315
                                             28 COMRAM     7     4      3
                   _convert_to_short
 ---------------------------------------------------------------------------------
 (4) _convert_to_short                                     7     5      2     815
                                             21 COMRAM     7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     386
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _can_transmit                                         2     0      2     557
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _mode_selection                                       2     0      2     109
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _display                                              8     6      2     222
                                             15 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _init_config                                          6     6      0    1701
                                             30 COMRAM     6     6      0
                    _convert_to_byte
         _eeprom_at24c04_random_read
                           _init_can
                _init_digital_keypad
                           _init_i2c
                   _init_ssd_control
 ---------------------------------------------------------------------------------
 (2) _init_ssd_control                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_i2c                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_digital_keypad                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_can                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eeprom_at24c04_random_read                           2     2      0      99
                                             16 COMRAM     2     2      0
                           _i2c_read
                      _i2c_rep_start
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (4) _i2c_write                                            1     1      0      31
                                             15 COMRAM     1     1      0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (4) _i2c_stop                                             0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (4) _i2c_start                                            0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (3) _i2c_rep_start                                        0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (3) _i2c_read                                             0     0      0       0
                         _i2c_no_ack
                        _i2c_rx_mode
 ---------------------------------------------------------------------------------
 (4) _i2c_rx_mode                                          0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (5) _i2c_idle                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c_no_ack                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _convert_to_byte                                      8     4      4    1438
                                             22 COMRAM     8     4      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     540
                                             15 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                 15    15      0       0
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_config
     _convert_to_byte
       ___lwdiv
       ___lwmod
     _eeprom_at24c04_random_read
       _i2c_read
         _i2c_no_ack
         _i2c_rx_mode
           _i2c_idle
       _i2c_rep_start
         _i2c_idle
       _i2c_start
         _i2c_idle
       _i2c_stop
         _i2c_idle
       _i2c_write
         _i2c_idle
     _init_can
     _init_digital_keypad
     _init_i2c
     _init_ssd_control
   _pick_to_light
     _display
     _mode_selection
     _node_config
       _can_transmit
       _construct_payload
         _convert_to_short
           ___wmul
       _convert_to_short
         ___wmul
       _eeprom_at24c04_byte_write
         _delay_ms
         _i2c_start
           _i2c_idle
         _i2c_stop
           _i2c_idle
         _i2c_write
           _i2c_idle
     _node_operation
       ___lwdiv
       ___lwmod
       _can_receive
       _can_transmit
       _construct_payload
         _convert_to_short
           ___wmul
     _read_digital_keypad

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      8      15       5       13.1%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     26      4F       1       84.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      64       3        0.0%
DATA                 0      0      64      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Thu Mar  8 07:59:27 2018

                      node_config@screen 0010                      ___wmul@multiplicand 0038  
                            __CFG_OSC$XT 000000                                      l101 0E24  
                                    l201 112A                                      l202 112E  
                                    l123 09F0                                      l162 07E2  
                                    l158 07A2                                      l177 10CC  
                                    l178 10D0                                      l385 11AE  
                                    l816 0F30                                      l826 103C  
                                    _CKE 007E3E                                      _GIE 007F97  
                                    _PEN 007E2A                                      _SEN 007E28  
                                    _SMP 007E3F                                      _isr 0008  
                                    _ssd 001F                   __end_of_node_operation 0A90  
                                    prod 000FF3                                      wreg 000FE8  
                           __CFG_LVP$OFF 000000                        _construct_payload 0CD6  
                           __CFG_WDT$OFF 000000                                     l2201 0F06  
                                   l2211 0F26                                     l2203 0F0A  
                                   l2221 101A                                     l2301 0A30  
                                   l1421 1068                                     l2223 101E  
                                   l2311 0A62                                     l1431 107E  
                                   l1415 1062                                     l2081 1126  
                                   l2161 1000                                     l2313 0A7E  
                                   l1425 1078                    ??_read_digital_keypad 0036  
                                   l2227 1032                                     l2219 1012  
                                   l2251 0E36                                     l2091 0DE6  
                                   l2323 0632                                     l2333 0662  
                                   l2327 0646                                     l2335 0674  
                                   l2271 095A                                     l1473 0F88  
                                   l2345 070C                                     l2425 0918  
                                   l2329 064A                                     l2265 0944  
                                   l2441 0EDA                                     l2419 0902  
                                   l2283 09DE                                     l2461 0C8C  
                                   l2437 0ECC                                     l2199 0EFE  
                                   l2383 0864                                     l2367 07F4  
                                   l2295 0A18                                     l2393 0890  
                                   l2289 09FC                                     l2379 0842  
                                   l2491 1180                                     l1991 0DB2  
                                   l1975 0D54                                     l1985 0D94  
                                   l1979 0D5C                                     ?_isr 0027  
                                   _T0IF 007F92                                     _T0CS 007EAD  
                                   u1210 10C4                                     u1220 10C6  
                                   u1340 0E24                                     u1500 0A14  
                                   u1254 0D80                                     u1255 0D7C  
                                   u1355 0D00                                     u1800 0C84  
                                   u1590 0644                                     u1815 0CB0  
                                   u1770 0912                                     u1780 0914  
                                   u1765 08D4                                     _RCEN 007E2B  
                                   i2l28 0C04                                     _TMR0 000FD6  
                                   _RSEN 007E29                       ?_construct_payload 0043  
                            display@data 0036                              display@wait 003B  
                                   _main 117C                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   btemp 0050                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 0016                      ??_construct_payload 0046  
                           ___param_bank 000010                            _i2c_rep_start 119E  
                          ??_i2c_rx_mode 0036                                    ??_isr 0027  
                   __size_of_can_receive 0042                                    ?_main 0027  
                                  _ACKEN 007E2C                                    _ACKDT 007E2D  
                                  _BCLIF 007D0B                          __end_of___lwdiv 0F3A  
                        __end_of___lwmod 1046                             ?_init_config 0027  
                                  _PORTA 000F80                                    _PORTC 000F82  
                                  _PORTD 000F83                                    _TRISA 000F92  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _SSPIF 007CF3                          ?_node_operation 0027  
              __end_of_construct_payload 0D50                             display@digit 003A  
                        __end_of_display 0DC6                        ??_convert_to_byte 0041  
                         __pbitbssCOMRAM 0268                           __CFG_BOREN$OFF 000000  
                                  tablat 000FF5                                    plusw2 000FDB  
                                  status 000FD8                        convert_to_short@i 0041  
eeprom_at24c04_random_read@received_data 0038                             ?_node_config 004A  
                             _i2c_no_ack 11B6                          __initialization 0F3A  
                         ?_i2c_rep_start 0027                             __end_of_main 1186  
                       __end_of_i2c_idle 11B6                         __end_of_i2c_read 117C  
                       __end_of_i2c_stop 1196                        ?_init_ssd_control 0027  
                                 ??_main 004D                            __activetblptr 000001  
                    __end_of_i2c_rx_mode 11AE                       ??_init_ssd_control 0036  
                                 _CANCON 000F6F                                   i2l1573 0BF8  
                                 i2l1577 0C02                       mode_selection@mode 0036  
                     mode_selection@once 0269                                   _RXB0D0 000F66  
                                 _RXB0D1 000F67                                   _RXB0D2 000F68  
                                 _RXB0D3 000F69                                   _RXB0D4 000F6A  
                                 _RXB0D5 000F6B                                   _RXB0D6 000F6C  
                                 _RXB0D7 000F6D                                   _TMR0IE 007F95  
                                 _TMR0IF 007F92                                   _TXB0D0 000F46  
                                 _TXB0D1 000F47                                   _TXB0D2 000F48  
                                 _TXB0D3 000F49                                   _TXB0D4 000F4A  
                                 _TXB0D5 000F4B                                   _TXB0D6 000F4C  
                                 _TXB0D7 000F4D              ?_eeprom_at24c04_random_read 0027  
                  __size_of_can_transmit 00EC                                   _SSPADD 000FC8  
                                 _TRISB2 007C9A                                   _TRISB3 007C9B  
                                 _TRISC3 007CA3                                   _TRISE0 007CB0  
                                 _TRISC4 007CA4                                   _TRISB7 007C9F  
                                 _SSPBUF 000FC9                       __size_of_i2c_start 0008  
                     __size_of_i2c_write 000C                         __end_of_delay_ms 113C  
            __end_of_init_digital_keypad 118E                        ?_convert_to_short 003C  
                                 ___wmul 10DA                         ??_mode_selection 0038  
                                 _digits 0601                                ??___lwdiv 003A  
                              ??___lwmod 003A                         __end_of_init_i2c 1152  
                     ??_convert_to_short 003E                         __end_of_init_can 0FC2  
                                 clear_0 0F40                                   clear_1 0F4E  
                              ??_display 0038                             __pdataCOMRAM 004E  
             __size_of_construct_payload 007A                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                             _can_transmit 0A90  
                             __accesstop 0060                  __end_of__initialization 0F6C  
                        __CFG_PBADEN$OFF 000000                            ___rparam_used 000001  
                        ??_i2c_rep_start 0036                              ?_i2c_no_ack 0027  
                         __pcstackCOMRAM 0027                    node_config@sub_screen 026A  
             ?_eeprom_at24c04_byte_write 0039                              _i2c_rx_mode 11A6  
                      __end_of_i2c_start 119E                        __end_of_i2c_write 1170  
                   __size_of_init_config 0096                               __pbssBANK0 0060  
                              ?_i2c_idle 0027                                ?_i2c_read 0027  
                              ?_i2c_stop 0027                   node_config@cur_segment 004E  
                                ?___wmul 0036                     __size_of_node_config 0316  
                                _ACKSTAT 007E2E                                  _ECANCON 000F77  
                       ??_node_operation 004A                                  _CANSTAT 000F6E  
                        _convert_to_byte 0E2E                                  _BRGCON1 000F70  
                                _BRGCON2 000F71                                  _BRGCON3 000F72  
          eeprom_at24c04_byte_write@data 0039                   __size_of_pick_to_light 0058  
            __end_of_read_digital_keypad 1082                                ?_delay_ms 0027  
                                _RXB0DLC 000F65                                  _RXB0CON 000F60  
                                i2u70_40 0BE6                                  _RXB0FUL 007B07  
                                i2u71_48 0BE8                      __size_of_i2c_no_ack 0006  
                                _TXB0DLC 000F45                                  _TXB0REQ 007A03  
                                _RXFCON0 000DD4                                  _SSPCON1 000FC6  
                         node_config@key 0072                               ??_i2c_idle 0036  
                             ??_i2c_read 0036                               ??_i2c_stop 0036  
                              ?_init_i2c 0027                                ?_init_can 0027  
                  construct_payload@data 0043                    construct_payload@sign 0045  
                  construct_payload@temp 0048                                  __Hparam 0000  
                                __Lparam 0000                            ??_can_receive 0036  
                        __size_of___wmul 0026                                  ___lwdiv 0EE8  
                                ___lwmod 1004                             __psmallconst 0600  
                                __pcinit 0F3A                                  __ramtop 0600  
                       _message_received 0268                                  __ptext0 117C  
                                __ptext1 0E90                                  __ptext2 1046  
                                __ptext3 0922                                  __ptext4 0FC2  
                                __ptext5 060C                                  __ptext6 1100  
                                __ptext7 1124                                  __ptext8 0CD6  
                                __ptext9 0DC6                                  _display 0D50  
                           __size_of_isr 0C38                                  _node_id 001B  
                             ??_delay_ms 0036                           __pintcode_body 0B7C  
                   end_of_initialization 0F6C                      convert_to_byte@data 003D  
              __size_of_init_ssd_control 0012                               ??_init_i2c 0036  
                             ??_init_can 0036                                  int_func 0B7C  
                       pick_to_light@key 004C                            _pick_to_light 0E90  
                __end_of_convert_to_byte 0E90                          init_config@temp 0049  
                                postinc0 000FEE                                _PORTBbits 000F81  
                              _PORTEbits 000F84                      __end_of_can_receive 1004  
                    convert_to_short@num 003F                            i2c_write@data 0036  
              __size_of_convert_to_short 0068                         node_config@count 0023  
                       node_config@value 0073                           ?_pick_to_light 0027  
                           ??_i2c_no_ack 0036                             ?_i2c_rx_mode 0027  
            ??_eeprom_at24c04_byte_write 003A                            delay_ms@_dcnt 0038  
                         __end_of___wmul 1100             __size_of_init_digital_keypad 0008  
                          delay_ms@count 0036                            __pidataCOMRAM 11BC  
                         __end_of_digits 060B                         convert_to_byte@a 0041  
                       convert_to_byte@i 0043                      start_initialization 0F3A  
                              _i2c_start 1196                              __end_of_isr 0C40  
                              _i2c_write 1164                       __end_of_i2c_no_ack 11BC  
                      __size_of_i2c_idle 0008                        __size_of_i2c_read 000C  
                           node_config@i 0070                             node_config@j 001A  
                      __size_of_i2c_stop 0008                    __end_of_i2c_rep_start 11A6  
                       ?_convert_to_byte 003D                                 ??___wmul 003A  
                            _can_receive 0FC2                            ??_init_config 0045  
                            __pbssCOMRAM 0001                            __pcstackBANK0 006D  
                __size_of_mode_selection 002A                               ?_i2c_start 0027  
                             ?_i2c_write 0027                _eeprom_at24c04_byte_write 1100  
                      __size_of_delay_ms 0018                          ??_pick_to_light 004C  
                       _init_ssd_control 1152                        __size_of_init_i2c 0016  
                      __size_of_init_can 0044                            ??_node_config 006D  
                       ___lwdiv@dividend 0036                                __pintcode 0008  
                               ?___lwdiv 0036                                 ?___lwmod 0036  
                     node_operation@temp 006F                       node_operation@wait 0016  
                               ?_display 0036                              __smallconst 0600  
                       _convert_to_short 0DC6                         ___lwdiv@quotient 003B  
                    __end_of_init_config 0CD6             __size_of_read_digital_keypad 003C  
                         ___wmul@product 003A                                delay_ms@i 0037  
           ??_eeprom_at24c04_random_read 0037                     node_operation@r_data 0014  
                               _RXB0EIDH 000F63                                 _RXB0EIDL 000F64  
                               _RXB0SIDH 000F61                                 _RXB0SIDL 000F62  
                               _RXF0SIDH 000F00                                 _RXF0SIDL 000F01  
                               _TXB0EIDH 000F43                                 _TXB0EIDL 000F44  
                               _RXM0EIDH 000F1A                                 _RXM0EIDL 000F1B  
                               _TXB0SIDH 000F41                                 _TXB0SIDL 000F42  
                               _RXM0SIDH 000F18                                 _RXM0SIDL 000F19  
    eeprom_at24c04_byte_write@memory_loc 003A                      __end_of_node_config 0922  
                   __size_of_i2c_rx_mode 0008                          node_config@byte 006F  
                        node_config@mode 004A                          node_config@temp 0012  
                      ___wmul@multiplier 0036        read_digital_keypad@detection_type 0036  
                          ?_can_transmit 0036                              ??_i2c_start 0036  
                            ??_i2c_write 0036      __size_of_eeprom_at24c04_random_read 002E  
                __size_of_node_operation 016E                      _init_digital_keypad 1186  
                               _i2c_idle 11AE                                 _i2c_read 1170  
                               _i2c_stop 118E                                isr@count1 000E  
                               __Hrparam 0000                                 __Lrparam 0000  
                           __Lsmallconst 0600                     ?_init_digital_keypad 0027  
                       __size_of___lwdiv 0052                         __size_of___lwmod 0042  
                            _init_config 0C40                         __size_of_display 0076  
                         _mode_selection 10B0                           ??_can_transmit 0038  
                               _delay_ms 1124                          ___lwdiv@divisor 0038  
                        ___lwdiv@counter 003A                                 __ptext10 10DA  
                               __ptext11 0A90                                 __ptext20 1164  
                               __ptext12 10B0                                 __ptext21 118E  
                               __ptext13 0D50                                 __ptext30 0EE8  
                               __ptext22 1196                                 __ptext14 0C40  
                               __ptext23 119E                                 __ptext15 1152  
                               __ptext24 1170                                 __ptext16 113C  
                               __ptext25 11A6                                 __ptext17 1186  
                               __ptext26 11AE                                 __ptext18 0F7E  
                               __ptext27 11B6                                 __ptext19 1082  
                               __ptext28 0E2E                                 __ptext29 1004  
                      node_operation@key 0073                        node_operation@rem 006D  
                               _init_i2c 113C                                 _init_can 0F7E  
                          __size_of_main 000A                  read_digital_keypad@once 004F  
     __size_of_eeprom_at24c04_byte_write 0024                              _node_config 060C  
                           ?_can_receive 0027                                 int$flags 0050  
                  ??_init_digital_keypad 0036                 __end_of_init_ssd_control 1164  
                 __end_of_mode_selection 10DA                     convert_to_byte@value 003F  
                               intlevel2 0000                        pick_to_light@mode 0018  
     __end_of_eeprom_at24c04_random_read 10B0               _eeprom_at24c04_random_read 1082  
                       ___lwmod@dividend 0036               can_transmit@can_tx_payload 0036  
               __end_of_convert_to_short 0E2E        __end_of_eeprom_at24c04_byte_write 1124  
                         _can_rx_payload 0001                      _read_digital_keypad 1046  
               __size_of_convert_to_byte 0062                          ?_mode_selection 0036  
                         _can_tx_payload 0060                          node_operation@i 0071  
                        ___lwmod@divisor 0038                          ___lwmod@counter 003A  
                         _node_operation 0922                   __size_of_i2c_rep_start 0008  
                   ?_read_digital_keypad 0027                     convert_to_short@data 003C  
                  __end_of_pick_to_light 0EE8     eeprom_at24c04_random_read@memory_loc 0037  
                   __end_of_can_transmit 0B7C  
